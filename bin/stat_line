#!/usr/bin/env python2
# coding: utf-8


from __future__ import division
import os
import psutil
import re
from time import sleep
import xcb

from datetime import datetime
from subprocess import Popen, PIPE
from urllib2 import urlopen
from urllib import urlencode
from xcb.xproto import Atom, PropMode

try:
    import sensors
    sensors.init()
    SENSORS_LOADED = True
except:
    pass
    SENSORS_LOADED = False

XCB_CONN = None

COLORS = {
    'black':        '#282828',
    'dark_grey':    '#928374',
    'dark_red':     '#cc241d',
    'red':          '#fb4934',
    'dark_green':   '#98971a',
    'green':        '#b8bb26',
    'dark_yellow':  '#d79921',
    'yellow':       '#fabd2f',
    'dark_blue':    '#458588',
    'blue':         '#83a598',
    'dark_magenta': '#b16286',
    'magenta':      '#d3869b',
    'dark_cyan':    '#689d6a',
    'cyan':         '#8ec07c',
    'grey':         '#a89984',
    'white':        '#ebdbb2'
}


class Info():
    check_interval = 1800
    last_w_str = ('', '')
    spotify_iface = None

    def battery(self):
        try:
            s = self.run_cmd(['acpi', '-b']).split()
        except OSError:
            return []
        state = s[2]
        perc = s[3].rstrip(',')
        return (state, perc)

    @staticmethod
    def run_cmd(cmd):
        return Popen(cmd, stdout=PIPE, stderr=PIPE).communicate()[0].strip()

    @classmethod
    def media(cls):
        to_ret = ''
        # MPV / ZTREAM
        mpv_pid = cls.run_cmd(['pgrep', 'mpv'])
        ls_path = os.path.expanduser('~/.last_station')
        station = ''

        if mpv_pid and os.path.isfile(ls_path):
            with open(ls_path, 'r') as f:
                station = f.read().strip('\n')
            if station:
                to_ret = '{} Radio'.format(station.title())

        # MPD
        mpd_pid = cls.run_cmd(['pgrep', 'mpd'])
        mopidy_pid = cls.run_cmd(['pgrep', 'mopidy'])
        if mpd_pid or mopidy_pid:
            try:
                status = cls.run_cmd(['mpc'])
            except OSError:
                to_ret = ''
                status = ''

            if not status or 'Couldn\'t connect' in status:
                to_ret = ''
            else:
                status = status.splitlines()[0]
                status_list = status.splitlines()
                if len(status_list) > 1:
                    to_ret = status[0]
                else:
                    to_ret = ''

        return ('', to_ret)

    @staticmethod
    def ram_perc():
        usage = psutil.virtual_memory()
        used_ram = usage.used - usage.cached
        return ('', '{ram}%'.format(
            ram=int((used_ram / usage.total) * 100)))

    @staticmethod
    def time():
        return str(datetime.now().strftime('%m/%d/%y @ %I:%M %p'))

    def temperature(self, nvidia_temp=True):
        if not SENSORS_LOADED:
            return ''
        status = ''
        try:
            for chip in sensors.iter_detected_chips():
                for feature in chip:
                    if 'Core' in feature.label:
                        status += '{}° '.format(int(feature.get_value()))
        except Exception as e:
            print(e)

        return status.rstrip()

    @staticmethod
    def cpu_perc():
        cpu_perc_flt = psutil.cpu_percent(None)

        return ('', '{cpu}%'.format(cpu=str(int(cpu_perc_flt))))

    def _check_weather(self):
        url = 'http://rss.accuweather.com/rss/liveweather_rss.asp?{}'.format(
            urlencode({'metric': 0, 'locCode': '30032'}))
        pattern = '\s.*Currently:\s(?P<w_type>.*):\s(?P<w_temp>\d+)(?P<w_deg>[C,F])' # noqa
        result = ('', '')

        try:
            f = urlopen(url, None, 10)
        except:
            return getattr(self, 'last_w_str', ('', ''))

        for line in f:
            if 'Currently:' in line:
                result = re.match(pattern, line)
                if result:
                    g_dict = result.groupdict()
                    icon = ''
                    if 'w_type' in g_dict:
                        if 'Rain' in g_dict['w_type']:
                            icon = ''
                        elif 'Cloud' in g_dict['w_type'] \
                                or 'Fog' in g_dict['w_type']:
                            icon = ''

                    self.last_w_str = (icon,
                                       '{w_type} - {w_temp}°{w_deg}'.format(
                                           w_type=g_dict['w_type'],
                                           w_temp=g_dict['w_temp'],
                                           w_deg=g_dict['w_deg']))
                else:
                    self.last_w_str = (' ', '')
        return getattr(self, 'last_w_str', ('', ''))

    def weather(self):
        now = datetime.now()
        try:
            last_check = getattr(self, 'last_check_time')
            diff = now - last_check
            if diff.seconds >= self.check_interval:
                check = True
            else:
                check = False
        except AttributeError:
            # First time through
            last_check = now
            check = True

        if check:
            ret = self._check_weather()
            self.last_check_time = now
        else:
            ret = self.last_w_str

        return ret
INFO = Info()


def update_text(text):
    c = get_conn()
    s = c.get_setup()
    r = s.roots[0].root
    text = text.encode('utf-8', 'ignore')

    try:
        c.core.ChangeProperty(PropMode.Replace, r, Atom.WM_NAME, Atom.STRING,
                              8, len(text), str(text))
        c.flush()
    except:
        raise


def get_conn():
    global XCB_CONN
    if not XCB_CONN:
        XCB_CONN = xcb.connect('')
    return XCB_CONN


def get_colored_statustext(notification=''):
    w = INFO.weather()
    if w[0]:
        output = '<span color="{}">{}</span> '.format(COLORS['green'],
                                                        w[1])
    else:
        output = ''

    m = INFO.media()
    if m and m[1]:
        output += '<span color="{}">{}</span> '.format(COLORS['blue'],
                                                        m[1])

    battery = INFO.battery()
    if battery:
        output += '<span color="{}">{}</span> '.format(COLORS['red'],
                                                        battery[1])

    tmp = INFO.temperature()
    if tmp:
        output += '<span color="{}">{}</span> '.format(COLORS['cyan'],
                                                        tmp)

    c = INFO.cpu_perc()
    if c and c[1]:
        output += '<span color="{}">{}</span> '.format(COLORS['red'],
                                                        c[1])

    r = INFO.ram_perc()
    if r and r[1]:
        output += '<span color="{}">{}</span> '.format(COLORS['magenta'],
                                                        r[1])

    output = unicode(output, 'utf-8')
    return output


if __name__ == '__main__':
    while True:
        text = get_colored_statustext()
        update_text(text)

        sleep(3)
