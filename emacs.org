#+TITLE: Emacs configuration

* Increase garbage collection threshold during init
  Theoretically increases boot up speed.

  #+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq gc-cons-threshold 64000000)
  (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
  #+end_src

* Store all backups and autosaves in the temp dir
  #+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq backup-directory-alist `((".*" . ,temporary-file-directory))
        auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  #+end_src

* Move our custom file to a location consistent with our other files (and source it)
  #+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
  #+end_src

* Load the other files in our set up
  #+begin_src elisp :tangle ~/.emacs.d/init.el
  (load "~/.emacs.d/packages.el")
  (load "~/.emacs.d/ui.el")
  (load "~/.emacs.d/languages.el")
  #+end_src

* Set up font
  Obviously requires [[https://sourcefoundry.org/hack/][Hack]] installed.

  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (setq default-frame-alist '((font . "Hack-9")))
  (set-face-attribute 'line-number-current-line nil
                      :font "Hack-9:weight=Bold"
                      :inverse-video nil)
#+end_src

* Enable some nice programming features in in prog-mode
  *NOTE*: This requires emacs 26 or newer!
  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (add-hook 'prog-mode-hook (function(lambda ()
    (prettify-symbols-mode 1)
    (show-paren-mode 1)
    (global-hl-line-mode 1)
    (display-line-numbers-mode)
    (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)))
  )
  #+end_src

* Disable scrollbar, menu bar, and tool bar

  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  #+end_src

* Set some variables (explained inline)
  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (setq initial-scratch-message ""                     ; disable the scratch message
        inhibit-startup-message t                      ; disable the startup screen
        scroll-conservatively 101                      ; move window one line at a time when point approaches edge
        scroll-margin 5                                ; start scrolling 5 lines from edge
        visible-bell t                                 ; Audible bell is cancer, but visible bell works okay
        ad-redefinition-action 'accept                 ; Tell emacs we're okay with functions being given advice
        vc-follow-symlinks t                           ; Follow symlinks to vcs controlled files
        select-enable-clipboard t                      ; copy actions copy to clipboard
        select-enable-primary t                        ; copy actions also copy to primary
        mouse-drag-copy-region t                       ; highlighting a section causes it to get copied (linux default behavior)
        prettify-symbols-unprettify-at-point t         ; unprettify symbols when the point hits them so we can edit them
  )
  (setq-default fill-column 80                         ; in fill-mode, what column do we wrap at?
                truncate-lines t                       ; disable line wrapping
                indent-tabs-mode nil                   ; use spaces over tabs everywhere
                tab-width 2                            ; but when encountering a tab, how large is it?
                tab-stop-list (number-sequence 3 120 2); and what are the tabstop points when shifting?
  )
#+end_src

* Don't make me type 'yes' or 'no', even if it's important
  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src

* Initialize existing packages
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (setq package-user-dir "~/.emacs.d/elpa"
        package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")))
  (defvar use-package-always-ensure t)
  #+end_src

Just calling :pin in req-package blocks doesn't work: [[https://github.com/jwiegley/use-package/issues/343#issuecomment-220463365][See this bug]]
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
(setq package-pinned-packages '((ensime . "melpa-stable")))
  #+end_src

* Auto-require some basic packages outside of use-package
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (package-install 'dash)
    (package-install 'delight))
  (require 'use-package)
  (require 'dash)
  (require 'bind-key)
  (require 'delight)
  #+end_src

* Ensure exec-path has a few key directories in it
  #+begin_src elisp :tangle ~/.emacs.d/init.el
  (use-package exec-path-from-shell
    :config
      (when (memq window-system '(mac ns x))
        (exec-path-from-shell-initialize)))
  #+end_src

* Instantiate a default leader key
  This key is just left of space on my Preonic.
  Since I don't use that keyboard everywhere, I use my desktop's hostname to determine if I should set prefix differently
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (defvar default-leader-key "<SPC>")
  (if (string= (system-name) "tia-bxb-d01.ctisl.gtri.org") (setq default-leader-key "<XF86TouchpadOff>"))
  #+end_src

* Set up General.el for keybindings
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package general
    :config
      (global-unset-key (kbd "C-h h")))
  #+end_src

* Set up Company as completion framework
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package company
    :delight company-mode
    :config
      (setq company-tooltip-limit 20
            company-tooltip-align-annotations t)
      (global-company-mode 1)
  )
  #+end_src

* Org mode!
  Rather important: We use this to tangle this very file (though 24+ ships a good enough version to do so)

  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package org
    :config
      (setq org-babel-load-languages
            '((python . t)
              (elisp . t)
              (shell . t))))

  #+end_src

  Make Org-mode bullets prettier
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
   (use-package org-bullets
      :init
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+end_src

* Discover and respect editorconfig settings
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package editorconfig)
  #+end_src

* Highlight colors in HTML/CSS/files
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
    (use-package rainbow-mode)
  #+end_src

* Set up evil and plugins
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package evil
    :init (setq evil-want-keybinding nil)
    :config
      (evil-mode 1)
      (evil-set-initial-state 'term-mode 'emacs))

  (use-package evil-matchit
    :after evil
    :config (global-evil-matchit-mode 1))

  (use-package evil-surround
    :after evil
    :config (global-evil-surround-mode 1))

  (use-package evil-easymotion
    :after evil
    :config (evilem-default-keybindings default-leader-key))

  (use-package evil-easymotion
    :after evil
    :config (evilem-default-keybindings default-leader-key))

  (use-package evil-collection
    :after evil
    :config (evil-collection-init))

  #+end_src

* Set up counsel + projectile to easily find and swap buffers
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package counsel
    :after (general)
    :delight ivy-mode
    :init
      (setq counsel-projectile-rg-initial-input '(thing-at-point 'symbol t))
    :config
      (ivy-mode 1)
      (general-define-key :states '(normal)
                          "/" 'swiper
                          "M-x" 'counsel-M-x)
      (general-define-key :states '(normal)
                          :prefix default-leader-key
                          "/" 'counsel-projectile-rg
                          "B" 'ivy-switch-buffer
                          "E" 'counsel-find-file))

  (use-package ivy-posframe
    :if (>= emacs-major-version 26)
    :disabled t
    :config
      (setq ivy-display-function #'ivy-posframe-display-at-point)
      (ivy-posframe-enable))


  (use-package projectile
    :delight projectile-mode
    :init
      (setq projectile-completion-system 'ivy
            projectile-require-project-root nil
            projectile-git-command "fd . --print0 --color never"
            projectile-indexing-method 'alien)
    :config
      (projectile-mode))

  (use-package counsel-projectile
    :after (projectile general)
    :config
      (general-define-key :states '(normal)
                          :prefix default-leader-key
                          "e" 'counsel-projectile-find-file
                          "p" 'counsel-projectile-switch-project
                          default-leader-key 'counsel-projectile))
  #+end_src

* Highlight TODO notes using fic-mode
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package fic-mode
    :init (setq fic-highlighted-words '("FIXME" "TODO" "BUG" "NOTE"))
    :hook (prog-mode . fic-mode))
  #+end_src

* Set up magit for git integration
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package magit
    :delight (magit-auto-revert-mode)
    :config
      (setq magit-popup-show-common-commands nil
            magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
      (add-hook 'after-save-hook #'magit-after-save-refresh-status)
      (general-define-key :keymaps 'evil-normal-state-map
                          :prefix default-leader-key
                          "g" #'magit))

  (use-package evil-magit
    :after magit
    :init
      (setq evil-magit-want-horizontal-movement nil))

  #+end_src

* Set up notmuch
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package notmuch
    :ensure nil
    :init
    (setq notmuch-saved-searches '(("Inbox" . "tag:inbox AND NOT tag:archived")
                                   ("Unread" . "tag:unread")
                                   ("EA" . "tag:ea")
                                   ("School" . "tag:school")
                                   ("Lists" . "tag:lists")
                                   ("Apiary" . "tag:apiary"))
          mail-specify-envelope-from t
          mail-envelope-from 'header
          message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "/home/bbennett37/.bin/notmuch_sendmail"
          notmuch-message-headers '("Subject" "From" "To" "Cc" "Date")
          mml-default-sign-method "smime"
          notmuch-fcc-dirs nil ;; exchange saves everything, so we deal with this in our 'new' script
          )

      (defun bb-notmuch-toggle-tag (tag)
        "Toggle the presence of a tag on a message"
        (if (member tag (notmuch-search-get-tags))
                    (notmuch-search-tag (list (concat "-" tag)))
                (notmuch-search-tag (list (concat "+" tag))))
         (next-line))

      (defun bb-notmuch-remove-inbox ()
        (interactive)
        (if (member "inbox" (notmuch-search-get-tags))
          (notmuch-search-tag (list "-inbox"))))

      (defun bb-notmuch-toggle-archived ()
        (interactive)
        (bb-notmuch-remove-inbox)
        (bb-notmuch-toggle-tag "archived"))

      (defun bb-notmuch-toggle-deleted ()
        (interactive)
        (bb-notmuch-remove-inbox)
        (bb-notmuch-toggle-tag "deleted"))

      (defun show-nm-inbox ()
        (interactive)
        (notmuch-search "tag:inbox and not tag:archived"))

      (defun show-nm-inbox-unread ()
        (interactive)
        (notmuch-search "tag:inbox and not tag:archived and tag:unread"))

    :config
      ;; define keys to take us to various inboxes
      (general-define-key :keymaps 'evil-normal-state-map
                          :prefix (concat default-leader-key " " "m")
                          "i" #'show-nm-inbox
                          "u" #'show-nm-inbox-unread
                          "/" #'notmuch-search)

      ;; override some behavior to be more vim like in notmuch modes.
      (general-define-key :keymaps '(notmuch-show-mode-map
                                     notmuch-search-mode-map)
                          "d" #'bb-notmuch-toggle-deleted
                          "a" #'bb-notmuch-toggle-archived
                          "j" #'next-line
                          "k" #'previous-line
                          ":" #'evil-ex
                          "r" #'notmuch-show-reply
                          "R" #'notmuch-show-reply-sender
                          "t" nil)

      (general-define-key :keymaps '(notmuch-show-mode-map
                                     notmuch-search-mode-map)
                          :prefix "C-w"
                          "h" #'evil-window-left
                          "j" #'evil-window-down
                          "k" #'evil-window-up
                          "l" #'evil-window-right
                          "s" #'evil-window-split
                          "v" #'evil-window-vsplit
                          "c" #'evil-window-delete)


      ;; define some keys to apply some tags in notmuch modes.
      (general-define-key :keymaps '(notmuch-show-mode-map
                                     notmuch-search-mode-map)
                          :prefix "t"
                          "s" #'(lambda () (interactive) (bb-notmuch-toggle-tag "school"))
                          "a" #'(lambda () (interactive) (bb-notmuch-toggle-tag "apiary"))
                          "t" #'(lambda () (interactive) (bb-notmuch-toggle-tag "todo"))
                          "e" #'(lambda () (interactive) (bb-notmuch-toggle-tag "ea")))
  )
  #+end_src

* Visual Fill Column (but only for notmuch)
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package visual-fill-column
    :hook ((notmuch-show . visual-line-mode)
           (notmuch-show . visual-fill-column-mode)))
  #+end_src

* Set up Flycheck to check codebases
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package flycheck
    :after (general)
    :delight flycheck-mode
    :commands (flycheck-mode)
    :init
      (add-to-list 'display-buffer-alist
                   `(,(rx bos "*Flycheck errors*" eos)
                     (display-buffer-reuse-window
                      display-buffer-in-side-window)
                     (reusable-frames . visible)
                     (side . bottom)
                     (window-height . 0.2)))
      (defun delete-flycheck-errors-list ()
        (interactive)
        (if (get-buffer-window "*Flycheck errors*" "visible") (delete-window (get-buffer-window "*Flycheck errors*" "visible"))))
    :config
      (general-define-key :prefix default-leader-key
                          :states '(normal)
                          "lo" 'flycheck-list-errors
                          "lc" 'delete-flycheck-errors-list
                          "ln" 'flycheck-next-error
                          "lp" 'flycheck-previous-error)
      (add-hook 'prog-mode-hook  (function (lambda () (flycheck-mode))))
    )
  (use-package flycheck-pos-tip
     :after flycheck
     :config (flycheck-pos-tip-mode))
  #+end_src

* Highlight nested brackets differently in bracketized languages
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package rainbow-delimiters
    :config
      (add-hook 'c-mode-common-hook (function (lambda () (rainbow-delimiters-mode-enable))))
      (add-hook 'scala-mode-hook (function (lambda () (rainbow-delimiters-mode-enable))))
      (add-hook 'elisp-mode-common-hook (function (lambda () (rainbow-delimiters-mode-enable)))))
  #+end_src

* Direnv 
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package direnv
    :config (direnv-mode))
  #+end_src

* Programming language setup
** lsp, for some later languages
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package lsp-mode
    :defer t)

  (use-package lsp-ui
    :after lsp-mode
    :init (add-hook 'lsp-mode-hook 'lsp-ui-mode))

  (use-package company-lsp
    :after (company lsp-mode)
    :config (push 'company-lsp company-backends))
  #+end_src

** Python

  You'll need [[https://github.com/palantir/python-language-server][python-language-server]], [[https://github.com/ambv/black][black]], and [[https://github.com/rupert/pyls-black][pyls-black]] installed inside a pyenv for this setup.


  Enable pyenv-mode and tell emacs to extend exec-path so we can find installed shims.
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package auto-virtualenv
    :hook (python-mode . auto-virtualenv-set-virtualenv))
  #+end_src

  Setup lsp-python and tell it we're using flake8 rather than pycodestyle as its configruation source.
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package lsp-python
    :init
      (defun lsp-set-python-cfg ()
        (let ((lsp-cfg `(:pyls (:configurationSources ("flake8")))))
           (lsp--set-configuration lsp-cfg)))
    :hook ((python-mode . lsp-python-enable)
           (lsp-after-initialize . lsp-set-python-cfg)))
  #+end_src

  Blacken python buffers on save
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package blacken
    :hook (python-mode . blacken-mode))
  #+end_src

** Javascript
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package rjsx-mode
    :mode "\\.js[x]*\\'"
    :init
      (defun setup-js-mode ()

        (setq js2-strict-missing-semi-warning nil
              js2-basic-offset 2
              js-indent-level 2
              js-switch-indent-offset 2
              evil-shift-width 2)
        (flycheck-select-checker 'javascript-standard))
    :hook (js-mode . setup-js-mode))

  #+end_src

** C/C++
  #+begin_src elisp :tangle ~/.emacs.d/languages.el
  (add-hook 'c++-mode-hook
            (function (lambda ()
                        (flycheck-select-checker 'c/c++-gcc))))
  #+end_src

** Scala
*** Scala-mode
#+begin_src elisp :tangle ~/.emacs.d/packages.el
(use-package scala-mode
  :interpreter ("scala" . scala-mode))
#+end_src

*** sbt-mode
#+begin_src elisp :tangle ~/.emacs.d/packages.el
    (use-package sbt-mode
  :commands sbt-start sbt-command
  :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map))
#+end_src


*** ENSIME
This requires some basic setup - find it documented [[http://ensime.org/editors/emacs/install/#installing][here.]]

#+begin_src elisp :tangle ~/.emacs.d/packages.el
(use-package ensime
  :pin melpa-stable
  :commands (ensime ensime-mode)
  :init (setq ensime-startup-notification nil ensime-startup-snapshot-notification nil)
  (add-hook 'scala-mode-hook #'ensime-mode)
  :config (set-face-attribute 'ensime-implicit-highlight nil
                              :underline nil
                              :slant 'italic)
  (defun flycheck-verify-ensime ()
    "Verify the Ensime syntax checker."
    (list (flycheck-verification-result-new
           :label "Ensime Mode"
           :message (if ensime-mode "Enabled" "Disabled")
           :face (if ensime-mode 'success '(bold warning)))

          (flycheck-verification-result-new :label "Ensime connection"
                                            :message (if (ensime-connected-p) "open" "closed")
                                            :face (if (ensime-connected-p) 'success '(bold warning)))))

  (defun flycheck-ensime-parse-note (note checker)
    "Parse a single Ensime NOTE for CHECKER into an error."
    (let ((severity (plist-get note :severity)))
      (unless (symbolp severity) (setq severity (intern severity)))
      (flycheck-error-new-at (plist-get note :line) (plist-get note :col) severity (plist-get note :msg)
                             :checker checker
                             :filename (plist-get note :file)
                             :buffer (current-buffer))))
  (defun flycheck-ensime-parse-notes (notes checker)
    "Parse Ensime NOTES for CHECKER into Flycheck errors."
    (mapcar (lambda (n) (flycheck-ensime-parse-note n checker)) notes))

  (defun flycheck-ensime-start (checker callback)
    "Start a syntax CHECKER with Ensime."
    (condition-case err
        (let* ((notes (ensime-scala-compiler-notes (ensime-connection)))
               (errors (flycheck-ensime-parse-notes notes checker)))
          (funcall callback 'finished errors))
      (error (funcall callback 'errored (error-message-string err)))))

  (defun flycheck-ensime-setup ()
    "Setup Flycheck for Ensime."
    (interactive)
    (add-to-list 'flycheck-checkers 'scala-ensime)
    (advice-add 'ensime-make-note-overlays
                :override #'ignore '((name . flycheck-ensime-disable-ensime-overlays))))

  (flycheck-define-generic-checker 'scala-ensime
    "A Scala syntax checker using Ensime."
    :start #'flycheck-ensime-start
    :verify #'flycheck-verify-ensime
    :modes '(scala-mode)
    :predicate (lambda () (and ensime-mode (ensime-connection-or-nil)))
    :next-checkers '((warning . scala-scalastyle))))
#+end_src

** Rust
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package rust-mode
    :mode ("\\.rs\\'" . rust-mode)
    :init
      (add-hook 'rust-mode-hook '(lambda ()
       (local-set-key (kbd "TAB") #'company-indent-or-complete-common)
       (setq rust-format-on-save t)
       (electric-pair-mode 1))))

  (use-package racer
    :disabled t
    :init
      (add-hook 'rust-mode-hook  #'racer-mode)
      (add-hook 'racer-mode-hook #'eldoc-mode))

  (use-package flycheck-rust
    :init (add-hook 'flycheck-mode-hook 'flycheck-rust-setup))

  (use-package lsp-rust
    :after lsp-mode
    :init (add-hook 'rust-mode-hook #'lsp-rust-enable))
  #+end_src


** Lua
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package lua-mode)
  #+end_src

* And some non-programming languages
** Markdown
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package markdown-mode
    :commands (markdown-mode)
    :config
      (setq markdown-css-paths
                   '("https://markdowncss.github.io/modest/css/modest.css"))
  )
  #+end_src

** YAML
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package yaml-mode
    :mode ("\\.yaml'" "\\.yml'"))
  #+end_src

* Set up visual theme
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package all-the-icons)

  (use-package doom-modeline
    :defer t
    :init
      (setq evil-normal-state-tag   (propertize " NORMAL " 'face '((:background "black" :foreground "green")))
            evil-emacs-state-tag    (propertize " EMACS " 'face '((:background "orange" :foreground "black")))
            evil-insert-state-tag   (propertize " INSERT " 'face '((:background "blue")))
            evil-motion-state-tag   (propertize " MOTION " 'face '((:background "blue")))
            evil-visual-state-tag   (propertize " VISUAL " 'face '((:background "grey80" :foreground "black")))
            evil-operator-state-tag (propertize " OPERATOR " 'face '((:background "purple"))))
    :hook (after-init . doom-modeline-init))

  (use-package doom-themes
    :init
      (setq doom-themes-enable-bold t
            doom-themes-enable-italic nil)
      (if (daemonp)
       (add-hook 'after-make-frame-functions (lambda (frame)
        (when (eq (length (frame-list)) 2)
         (progn (select-frame frame) (load-theme 'doom-nord)))))
       (load-theme 'doom-nord t))
      (doom-themes-visual-bell-config)
      (doom-themes-org-config))

  (use-package solaire-mode
    :init
      (setq solaire-mode-remap-modeline nil)
      (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
      (defface solaire-default-face
        '((t :inherit default :background "#1f2021"))
        "Face for solaire"
      )
      (defface solaire-minibuffer-face
        '((t :background "#22252c" :foreground "#abb2bf"))
        "Face for solaire - minibuffer"
      )
      (defface solaire-line-number-face
        '((t :inherit 'line-number :background "#22252c"))
        "Face for solaire - line number"
      )
      (defface solaire-hl-line-face
        '((t :inherit 'hl-line :background "#22252c"))
        "Face for solaire - highlghted line number"
      )
      (solaire-mode-swap-bg)
  )
  #+end_src

* De-light a few dependency minor-modes
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package undo-tree
    :delight undo-tree-mode)
  (use-package yasnippet
    :delight yas-minor-mode)
  #+end_src

* Fix up hideshow mode
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package hideshow
    :init
      (setq hs-allow-nesting t)
    :config
      (add-hook 'prog-mode-hook #'hs-minor-mode))
  #+end_src

* Spawn an eshell nicely
  Namely, in the bottom third of the current window and with a custom name
  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
     current buffer's file. The eshell is renamed to match that
     directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                   (file-name-directory (buffer-file-name))
                 default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
           (split-window-vertically (- height))
           (other-window 1)
           (eshell "new")
           (rename-buffer (concat "*eshell: " name "*"))
            (insert (concat "ls"))
            (eshell-send-input)))

     (defun eshell/x ()
       (insert "exit")
       (eshell-send-input)
       (delete-window))

     (general-define-key :states '(normal)
                         :prefix (concat default-leader-key)
                         "!" 'eshell-here)
                               
    #+end_src
