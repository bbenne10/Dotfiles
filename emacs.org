#+TITLE: Emacs configuration
#+PROPERTY: VISIBILITY: children

* Speed up initialization

Raising garbage collection limit,
seting file-name-handler-alist to nil (because regular expressions are expensive),
and avoiding resizing the frame based on the font size.

Then we set a hook to set the gc and file-name-handler-alist back to their original values after init
#+begin_src elisp :tangle ~/.config/emacs/early-init.el
  ;; -*- lexical-binding: t -*-
  (setq gc-cons-threshold most-positive-fixnum
        frame-inhibit-implied-resize t)
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  (advice-add #'x-apply-session-resources :override #'ignore)
#+end_src

* Set up font
  #+begin_src elisp :tangle ~/.config/emacs/early-init.el
    (set-face-attribute 'default nil
      :family "JetBrains Mono"
      :height 120
      :width 'normal
      :weight 'normal)

    (set-face-attribute 'line-number-current-line nil
      :family "JetBrains Mono"
      :height 120
      :width 'expanded
      :weight 'normal
      :inverse-video nil)
#+end_src

* Set up normal init
  #+begin_src elisp :tangle ~/.config/emacs/init.el
  (defvar default-file-name-handler-alist file-name-handler-alist)
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6
        file-name-handler-alist nil
        frame-inhibit-implied-resize t)
  (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 16777216
                                           gc-cons-percentage 0.1
                                           file-name-handler-alist default-file-name-handler-alist)))
  #+end_src
* Store all backups and autosaves in the temp dir
  #+begin_src elisp :tangle ~/.config/emacs/init_core.el
  (setq backup-directory-alist `((".*" . ,temporary-file-directory))
        auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  #+end_src

* Move our custom file to a location consistent with our other files (and source it)
  #+begin_src elisp :tangle ~/.config/emacs/init.el
  (setq custom-file "~/.config/emacs/custom.el")
  (load custom-file 'noerror)
  #+end_src

* Load the other files in our set up
  #+begin_src elisp :tangle ~/.config/emacs/init.el
  (load "~/.config/emacs/init_core.el")
  (load "~/.config/emacs/init_editing.el")
  (load "~/.config/emacs/init_ui.el")
  (load "~/.config/emacs/init_programming.el")
  #+end_src

* Enable some nice programming features in in prog-mode
  #+begin_src elisp :tangle ~/.config/emacs/init_editing.el
  (add-hook 'prog-mode-hook (function(lambda ()
    (prettify-symbols-mode 1)
    (show-paren-mode 1)
    (global-hl-line-mode 1)
    (display-line-numbers-mode)
    (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)))
  )
  #+end_src

* Set some variables (explained inline)
  #+begin_src elisp :tangle ~/.config/emacs/init_editing.el
  (setq initial-scratch-message ""                     ; disable the scratch message
        inhibit-startup-message t                      ; disable the startup screen
        scroll-conservatively 101                      ; move window one line at a time when point approaches edge
        scroll-margin 5                                ; start scrolling 5 lines from edge
        visible-bell t                                 ; Audible bell is cancer, but visible bell works okay
        ad-redefinition-action 'accept                 ; Tell emacs we're okay with functions being given advice
        vc-follow-symlinks t                           ; Follow symlinks to vcs controlled files
        select-enable-clipboard t                      ; copy actions copy to clipboard
        select-enable-primary t                        ; copy actions also copy to primary
        mouse-drag-copy-region t                       ; highlighting a section causes it to get copied (linux default behavior)
        prettify-symbols-unprettify-at-point t         ; unprettify symbols when the point hits them so we can edit them
  )
  (setq-default fill-column 80                         ; in fill-mode, what column do we wrap at?
                truncate-lines t                       ; disable line wrapping
                indent-tabs-mode nil                   ; use spaces over tabs everywhere
                tab-width 2                            ; but when encountering a tab, how large is it?
                tab-stop-list (number-sequence 3 120 2); and what are the tabstop points when shifting?
  )
#+end_src

* Don't make me type 'yes' or 'no', even if it's important
  #+begin_src elisp :tangle ~/.config/emacs/init_editing.el
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src

* Auto-require some basic packages outside of use-package/straight.el
  #+begin_src elisp :tangle ~/.config/emacs/init_core.el
    (defvar bootstrap-version)
    (let ((bootstrap-file
           (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
          (bootstrap-version 5))
      (unless (file-exists-p bootstrap-file)
        (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
       'silent 'inhibit-cookies)
          (goto-char (point-max))
          (eval-print-last-sexp)))
      (load bootstrap-file nil 'nomessage))

    (straight-use-package 'use-package)
    (setq straight-use-package-by-default t)
  #+end_src

* esup
for debugging startup times :)
  #+begin_src elisp :tangle ~/.config/emacs/init_core.el
  (use-package esup)
  #+end_src
* Make sure that we have our exec-path correct
#+begin_src elisp :tangle ~/.config/emacs/init_core.el
  (use-package exec-path-from-shell
    :if (memq window-system '(mac ns))
    :init (setq exec-path-from-shell-check-startup-files nil
                exec-path-from-shell-shell-name "/opt/local/bin/zsh")
    :config (exec-path-from-shell-initialize))
#+end_src
* Theme!
  #+begin_src elisp :tangle ~/.config/emacs/init_ui.el
    (use-package doom-themes
      :config
        (load-theme 'doom-spacegrey)
        (doom-themes-visual-bell-config)
        (doom-themes-org-config))
    (use-package doom-modeline
      :config (doom-modeline-mode))
  #+end_src

* Instantiate a default leader key
  This key is just left of space on my Preonic.
  Since I don't use that keyboard everywhere, I use my desktop's hostname to determine if I should set prefix differently
  #+begin_src elisp :tangle ~/.config/emacs/init_core.el
  (defvar bb-default-leader-key "<SPC>")
  (if (string= (system-name) "tia-bxb-d01.ctisl.gtri.org") (setq bb-default-leader-key "<XF86TouchpadOff>"))
  #+end_src

* Set up evil and plugins
  Set up evil, but defer JUUUUUST a bit, since it's pretty slow
  #+begin_src elisp :tangle ~/.config/emacs/init_core.el
    (use-package evil-leader
        :config
        (evil-leader/set-leader "<SPC>")
        (evil-leader/set-key "B" 'ido-switch-buffer)
        (global-evil-leader-mode))
    (use-package evil
        :demand t
        :after evil-leader
        :defer 0.1
        :config
        (evil-mode 1))

    (use-package evil-matchit
        :after evil
        :config (global-evil-matchit-mode 1))

    (use-package evil-surround
        :after evil
        :config (global-evil-surround-mode 1))
  #+end_src
* Neotree for a left-hand side directory overview
  #+begin_src elisp :tangle ~/.config/emacs/init_ui.el
    (use-package neotree
        :bind (("<f8>" . neotree-toggle))
        :config (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
  #+end_src

* Selectrum + Prescient for filtering stuff
#+begin_src elisp :tangle ~/.config/emacs/init_ui.el
  (use-package selectrum
    :config (selectrum-mode 1))
  (use-package prescient)

  (use-package selectrum-prescient
    :config
    (selectrum-prescient-mode)
    (prescient-persist-mode))
#+end_src

* Set up Company as completion framework
  #+begin_src elisp :tangle ~/.config/emacs/init_ui.el
  (use-package company
    :delight company-mode
    :config
      (setq company-tooltip-limit 20
            company-tooltip-align-annotations t)
      (global-company-mode 1)
  )
  #+end_src
* Ripgrep for searching
  #+begin_src elisp :tangle ~/.config/emacs/init_core.el
  (use-package ripgrep)
  #+end_src

* Make folding work okay
  Still haven't found a great folding library for emacs.
  Origami.el will have to do for now
  #+begin_src elisp :tangle ~/.config/emacs/init_editing.el
    (use-package origami
      :hook (prog-mode . origami-mode))
  #+end_src

* projectile: So that we can jump around easily
  #+begin_src elisp :tangle ~/.config/emacs/init_core.el
    (use-package projectile
      :delight projectile-mode
      :commands (projectile-switch-project projectile-find-file projectile-mode)
      :after evil-leader
      :init
        (setq projectile-completion-system 'default
              projectile-require-project-root nil
              projectile-git-command "fd . --print0 --color never"
              projectile-indexing-method 'alien
              projectile-project-search-path '("~/code"))
      :config
        (evil-leader/set-key
          "p" 'projectile-switch-project
          "b" 'projectile-find-file
          "/" 'projectile-ripgrep
          evil-leader/leader 'projectile-find-file
        )
        (projectile-mode))
  #+end_src
* Set up magit for git integration
  #+begin_src elisp :tangle ~/.config/emacs/init_core.el
  (use-package magit
    :commands (magit-status)
    :config
      (setq magit-popup-show-common-commands nil
            magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
      (add-hook 'after-save-hook #'magit-after-save-refresh-status))

  (use-package evil-magit
    :after magit
    :init
      (setq evil-magit-want-horizontal-movement nil))

  #+end_src

# * Highlight nested brackets differently in bracketized languages
#   #+begin_src elisp :tangle ~/.config/emacs/packages.el
#   (use-package rainbow-delimiters
#     :config
#       (add-hook 'c-mode-common-hook (function (lambda () (rainbow-delimiters-mode-enable))))
#       (add-hook 'scala-mode-hook (function (lambda () (rainbow-delimiters-mode-enable))))
#       (add-hook 'elisp-mode-common-hook (function (lambda () (rainbow-delimiters-mode-enable)))))
#   #+end_src

* Setup Direnv so we can properly change environements :)
  #+begin_src elisp :tangle ~/.config/emacs/init_core.el
  (use-package direnv
    :config (direnv-mode))
  #+end_src
* Discover and respect editorconfig settings
  #+begin_src elisp :tangle ~/.config/emacs/init_editing.el
  (use-package editorconfig
    :config (editorconfig-mode 1))
  #+end_src
* Highlight colors in HTML/CSS/files
  #+begin_src elisp :tangle ~/.config/emacs/init_ui.el
    (use-package rainbow-mode)
  #+end_src
* Highlight nested brackets differently in bracketized languages
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
  #+end_src
* Highlight TODO notes using fic-mode
  #+begin_src elisp :tangle ~/.config/emacs/init_ui.el
  (use-package fic-mode
    :commands (fic-mode)
    :init (setq fic-highlighted-words '("FIXME" "TODO" "BUG" "NOTE"))
    :hook (prog-mode . fic-mode))
  #+end_src
* lsp, for some later languages
 #+begin_src elisp :tangle ~/.config/emacs/init_programming.el
 ;; TODO: figure out why this works but changing to :hook didn't...
 (use-package flymake-diagnostic-at-point
   :commands (flymake-diagnostic-at-point-mode)
   :init
     (defun display-popup (text) (eldoc-box--display text))
     (setq flymake-diagnostic-at-point-display-diagnostic-function #'display-popup)
   :config (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode)
 )
 (use-package eglot
   :commands (eglot eglot-ensure)
   :hook ((python-mode . eglot-ensure)
          (rust-mode . eglot-ensure))
 )
 (use-package eldoc-box
   :commands (eldoc-box-hover-mode)
   :after eglot
   :config
     (add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-mode t)
 )
 #+end_src
* Python

 You'll need [[https://github.com/palantir/python-language-server][python-language-server]], [[https://github.com/ambv/black][black]], and [[https://github.com/rupert/pyls-black][pyls-black]] installed inside a pyenv for this setup.

 #+begin_src elisp :tangle ~/.config/emacs/init_programming.el
 (use-package auto-virtualenv
   :commands (auto-virtualenv-set-virtualenv)
   :hook (python-mode . auto-virtualenv-set-virtualenv))
 #+end_src

 Blacken python buffers on save
 #+begin_src elisp :tangle ~/.config/emacs/init_programming.el
 ;; (use-package blacken
 ;;   :commands (blacken)
 ;;   :hook (python-mode . blacken-mode))

 (use-package apheleia
   :straight (apheleia
              :host github
              :repo "raxod502/apheleia")
   :config (apheleia-global-mode 1))
 #+end_src

* Javascript
 #+begin_src elisp :tangle ~/.config/emacs/init_programming.el
 (use-package web-mode
   :mode (".jsx?$" ".html$" ".css$")
   :init
     (setq web-mode-markup-indent-offset 2
           web-mode-code-indent-offset 2
           web-mode-css-indent-offset 2
           web-mode-attr-indent-offset 2
           web-mode-enable-css-colorization t
           web-mode-enable-current-column-highlight t
           web-mode-enable-auto-quoting nil
     )
   :config
     (add-to-list 'eglot-server-programs '(web-mode . ("javascript-typescript-stdio")))
 )
 #+end_src
* Lua
#+begin_src elisp :tangle ~/.config/emacs/init_programming.el
(use-package lua-mode
  :mode (".lua$"))
#+end_src
* YAML
 #+begin_src elisp :tangle ~/.config/emacs/init_programming.el
 (use-package yaml-mode
   :mode ("\\.yaml'" "\\.yml'"))
 #+end_src

* Org mode!
  Rather important: We use this to tangle this very file (though 24+ ships a good enough version to do so)

  #+begin_src elisp :tangle ~/.config/emacs/init_editing.el
  (setq agenda-path "/ssh:bryan@bryan-bennett.com:~bryan/synced/agenda.org")
  (use-package org
    :defer t
    :mode ("\\.org$" . org-mode)
    :bind (("C-c l" . org-store-link)
            ("C-c c" . org-capture)
            ("C-c a" . org-agenda)
            ("C-c o" . (lambda () (interactive) (find-file agenda-path)))
            :map org-mode-map
              ;; ("C-h" . org-delete-backward-char)
              ("C-c !" . org-time-stamp-inactive))
    :config
      (setq org-agenda-files '(agenda-path)
            org-capture-templates '(
              ("t"
               "Todo - Personal"
               entry
               (file+olp agenda-path "Agenda" "Personal"))
              ("T"
               "Todo - Work"
               entry
               (file+olp agenda-path "Agenda" "Work"))
              ("g"
               "Grocery Item"
               checkitem
               (file+olp agenda-path "Purchases" "Groceries"))
              ("p"
               "Purchase - Personal"
               checkitem
               (file+olp agenda-path "Purchases" "Personal"))
              ("P"
               "Purchase - Shared"
               checkitem
               (file+olp agenda-path "Purchases" "Shared"))
              ("r"
               "Recipe (to Try)"
               entry
               (file+olp agenda-path "Purchases" "Shared")
               "* [[%^{url?}][%^{title?}]]"
              )
            )
      )
  )
  ;; Avoid `org-babel-do-load-languages' since it does an eager require.
  (use-package ob-python
    :defer t
    :ensure org-plus-contrib
    :commands (org-babel-execute:python))

  (use-package ob-shell
    :defer t
    :ensure org-plus-contrib
    :commands
    (org-babel-execute:sh
     org-babel-expand-body:sh

     org-babel-execute:bash
     org-babel-expand-body:bash))

  (use-package ob-emacs-lisp
    :defer t
    :ensure org-plus-contrib
    :commands (org-babel-expand:emacs-lisp org-babel-expand-body:emacs-lisp))
    #+end_src
* Make Org-mode bullets prettier
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
   (use-package org-bullets
     :hook (org-mode . org-bullets-mode))
  #+end_src
