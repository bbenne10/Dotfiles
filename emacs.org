#+TITLE: Emacs configuration
#+PROPERTY: VISIBILITY: children

* Increase garbage collection threshold during init
  #+begin_src elisp :tangle ~/.config/emacs/init.el
  (setq gc-cons-threshold 402653184
          gc-cons-percentage 0.6)
  (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 16777216
                                           gc-cons-percentage 0.1)))
  #+end_src

* Store all backups and autosaves in the temp dir
  #+begin_src elisp :tangle ~/.config/emacs/init.el
  (setq backup-directory-alist `((".*" . ,temporary-file-directory))
        auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  #+end_src

* Move our custom file to a location consistent with our other files (and source it)
  #+begin_src elisp :tangle ~/.config/emacs/init.el
  (setq custom-file "~/.config/emacs/custom.el")
  (load custom-file 'noerror)
  #+end_src

* Load the other files in our set up
  #+begin_src elisp :tangle ~/.config/emacs/init.el
  (load "~/.config/emacs/packages.el")
  (load "~/.config/emacs/ui.el")
  #+end_src

* Set up font
  Obviously requires [[https://sourcefoundry.org/hack/][Hack]] installed.

  #+begin_src elisp :tangle ~/.config/emacs/ui.el
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono-12"))
  (set-face-attribute 'line-number-current-line nil
		      :font (concat "JetBrains Mono-12:weight=Bold")
		      :inverse-video nil)
#+end_src

* Enable some nice programming features in in prog-mode
  #+begin_src elisp :tangle ~/.config/emacs/ui.el
  (add-hook 'prog-mode-hook (function(lambda ()
    (prettify-symbols-mode 1)
    (show-paren-mode 1)
    (global-hl-line-mode 1)
    (display-line-numbers-mode)
    (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)))
  )
  #+end_src

* Disable scrollbar, menu bar, and tool bar

  #+begin_src elisp :tangle ~/.config/emacs/ui.el
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  #+end_src

* Set some variables (explained inline)
  #+begin_src elisp :tangle ~/.config/emacs/ui.el
  (setq initial-scratch-message ""                     ; disable the scratch message
        inhibit-startup-message t                      ; disable the startup screen
        scroll-conservatively 101                      ; move window one line at a time when point approaches edge
        scroll-margin 5                                ; start scrolling 5 lines from edge
        visible-bell t                                 ; Audible bell is cancer, but visible bell works okay
        ad-redefinition-action 'accept                 ; Tell emacs we're okay with functions being given advice
        vc-follow-symlinks t                           ; Follow symlinks to vcs controlled files
        select-enable-clipboard t                      ; copy actions copy to clipboard
        select-enable-primary t                        ; copy actions also copy to primary
        mouse-drag-copy-region t                       ; highlighting a section causes it to get copied (linux default behavior)
        prettify-symbols-unprettify-at-point t         ; unprettify symbols when the point hits them so we can edit them
  )
  (setq-default fill-column 80                         ; in fill-mode, what column do we wrap at?
                truncate-lines t                       ; disable line wrapping
                indent-tabs-mode nil                   ; use spaces over tabs everywhere
                tab-width 2                            ; but when encountering a tab, how large is it?
                tab-stop-list (number-sequence 3 120 2); and what are the tabstop points when shifting?
  )
#+end_src

* Don't make me type 'yes' or 'no', even if it's important
  #+begin_src elisp :tangle ~/.config/emacs/ui.el
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src

* Auto-require some basic packages outside of use-package
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
  (setq straight-use-package-by-default t)
  (straight-use-package 'use-package)
  #+end_src

* Instantiate a default leader key
  This key is just left of space on my Preonic.
  Since I don't use that keyboard everywhere, I use my desktop's hostname to determine if I should set prefix differently
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (defvar default-leader-key "<SPC>")
  (if (string= (system-name) "tia-bxb-d01.ctisl.gtri.org") (setq default-leader-key "<XF86TouchpadOff>"))
  #+end_src

* Set up General.el for keybindings
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package general
    :config
      (global-unset-key (kbd "C-h h")))
  #+end_src

* Ensure exec-path has a few key directories in it
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package exec-path-from-shell
    :demand t
    :config
      (setq exec-path-from-shell-check-startup-files nil)
      (when (memq window-system '(mac ns x))
        (exec-path-from-shell-initialize)))
  #+end_src

* Set up Company as completion framework
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package company
    :delight company-mode
    :config
      (setq company-tooltip-limit 20
            company-tooltip-align-annotations t)
      (global-company-mode 1)
  )
  #+end_src

* Org mode!
  Rather important: We use this to tangle this very file (though 24+ ships a good enough version to do so)

  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (setq agenda-path "/ssh:bryan@bryan-bennett.com:~bryan/synced/agenda.org")
  (use-package org
    :defer t
    :mode ("\\.org$" . org-mode)
    :bind (("C-c l" . org-store-link)
            ("C-c c" . org-capture)
            ("C-c a" . org-agenda)
            ("C-c o" . (lambda () (interactive) (find-file agenda-path)))
            :map org-mode-map
              ;; ("C-h" . org-delete-backward-char)
              ("C-c !" . org-time-stamp-inactive))
    :config
      (setq org-babel-load-languages
            '((python . t)
              (elisp . t)
              (shell . t))
            org-agenda-files '(agenda-path)
            org-capture-templates '(
              ("t"
               "Todo - Personal"
               entry
               (file+olp agenda-path "Agenda" "Personal"))
              ("T"
               "Todo - Work"
               entry
               (file+olp agenda-path "Agenda" "Work"))
              ("g"
               "Grocery Item"
               checkitem
               (file+olp agenda-path "Purchases" "Groceries"))
              ("p"
               "Purchase - Personal"
               checkitem
               (file+olp agenda-path "Purchases" "Personal"))
              ("P"
               "Purchase - Shared"
               checkitem
               (file+olp agenda-path "Purchases" "Shared"))
              ("r"
               "Recipe (to Try)"
               entry
               (file+olp agenda-path "Purchases" "Shared")
               "* [[%^{url?}][%^{title?}]]"
              )
            )
      ))
  #+end_src

  Make Org-mode bullets prettier
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
   (use-package org-bullets
      :init
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
  #+end_src

* Discover and respect editorconfig settings
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package editorconfig)
  #+end_src

* Highlight colors in HTML/CSS/files
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
    (use-package rainbow-mode)
  #+end_src

* Set up evil and plugins
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package evil
    :init (setq evil-want-keybinding nil)
    :config
      (evil-mode 1)
      (evil-set-initial-state 'term-mode 'emacs))

  (use-package evil-matchit
    :after evil
    :config (global-evil-matchit-mode 1))

  (use-package evil-surround
    :after evil
    :config (global-evil-surround-mode 1))

  (use-package evil-collection
    :after evil
    :config (evil-collection-init))

  #+end_src

* Set up counsel + projectile to easily find and swap buffers
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package swiper
    :after (general)
    :commands (swiper)
  )

  (use-package counsel
    :after (general)
    :commands (swiper counsel-M-x)
    :delight ivy-mode
    :init
      (setq counsel-projectile-rg-initial-input '(thing-at-point 'symbol t))
    :config
      (ivy-mode 1)
      (general-define-key :states '(normal)
                          "/" 'swiper
                          "M-x" 'counsel-M-x)
      (general-define-key :states '(normal)
                          :prefix default-leader-key
                          "B" 'ivy-switch-buffer
                          "E" 'counsel-find-file))

  (use-package projectile
    :delight projectile-mode
    :init
      (setq projectile-completion-system 'ivy
            projectile-require-project-root nil
            projectile-git-command "fd . --print0 --color never"
            projectile-indexing-method 'alien)
    :config
      (projectile-mode))

  (use-package counsel-projectile
    :after (projectile general)
    :config
      (general-define-key :states '(normal)
                          :prefix default-leader-key
                          "/" 'counsel-projectile-rg
                          "e" 'counsel-projectile-find-file
                          "p" 'counsel-projectile-switch-project
                          default-leader-key 'counsel-projectile))
  #+end_src

* Highlight TODO notes using fic-mode
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package fic-mode
    :init (setq fic-highlighted-words '("FIXME" "TODO" "BUG" "NOTE"))
    :hook (prog-mode . fic-mode))
  #+end_src

* Set up magit for git integration
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package magit
    :delight (magit-auto-revert-mode)
    :config
      (setq magit-popup-show-common-commands nil
            magit-display-buffer-function 'magit-display-buffer-same-window-except-diff-v1)
      (add-hook 'after-save-hook #'magit-after-save-refresh-status)
      (general-define-key :keymaps 'evil-normal-state-map
                          :prefix default-leader-key
                          "g" #'magit))

  (use-package evil-magit
    :after magit
    :init
      (setq evil-magit-want-horizontal-movement nil))

  #+end_src

* Highlight nested brackets differently in bracketized languages
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package rainbow-delimiters
    :config
      (add-hook 'c-mode-common-hook (function (lambda () (rainbow-delimiters-mode-enable))))
      (add-hook 'scala-mode-hook (function (lambda () (rainbow-delimiters-mode-enable))))
      (add-hook 'elisp-mode-common-hook (function (lambda () (rainbow-delimiters-mode-enable)))))
  #+end_src

* Direnv 
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package direnv
    :config (direnv-mode))
  #+end_src

* Programming language setup
** lsp, for some later languages
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  ;; TODO: figure out why this works but changing to :hook didn't...
  (use-package flymake-diagnostic-at-point
    :after flymake
    :init
      (defun display-popup (text) (eldoc-box--display text))
      (setq flymake-diagnostic-at-point-display-diagnostic-function #'display-popup)
    :config (add-hook 'flymake-mode-hook #'flymake-diagnostic-at-point-mode)
  )
  (use-package eglot
    :commands (eglot eglot-ensure)
    :hook ((python-mode . eglot-ensure)
           (rust-mode . eglot-ensure))
  )
  (use-package eldoc-box
    :after eglot
    :config
      (add-hook 'eglot--managed-mode-hook #'eldoc-box-hover-mode t)
  )
  #+end_src

** Python

  You'll need [[https://github.com/palantir/python-language-server][python-language-server]], [[https://github.com/ambv/black][black]], and [[https://github.com/rupert/pyls-black][pyls-black]] installed inside a pyenv for this setup.

  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package auto-virtualenv
    :hook (python-mode . auto-virtualenv-set-virtualenv))
  #+end_src

  Blacken python buffers on save
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package blacken
    :hook (python-mode . blacken-mode))
  #+end_src

** Javascript
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package web-mode
    :mode (".jsx?$" ".html$" ".css$")
    :init
      (setq web-mode-markup-indent-offset 2
            web-mode-code-indent-offset 2
            web-mode-css-indent-offset 2
            web-mode-attr-indent-offset 2
            web-mode-enable-css-colorization t
            web-mode-enable-current-column-highlight t
            web-mode-enable-auto-quoting nil
      )
      (add-to-list 'eglot-server-programs '(web-mode . ("javascript-typescript-stdio")))
  )
  #+end_src

** Rust
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package rust-mode
    :mode ("\\.rs\\'" . rust-mode)
    :init
      (add-hook 'rust-mode-hook '(lambda ()
       (local-set-key (kbd "TAB") #'company-indent-or-complete-common)
       (setq rust-format-on-save t)
       (electric-pair-mode 1))))

  (use-package racer
    :disabled t
    :init
      (add-hook 'rust-mode-hook  #'racer-mode)
      (add-hook 'racer-mode-hook #'eldoc-mode))
  #+end_src


** Lua
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package lua-mode)
  #+end_src

* And some non-programming languages
** Markdown
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package markdown-mode
    :commands (markdown-mode)
    :config
      (setq markdown-css-paths
                   '("https://markdowncss.github.io/modest/css/modest.css"))
  )
  #+end_src

** YAML
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package yaml-mode
    :mode ("\\.yaml'" "\\.yml'"))
  #+end_src

* Set up visual theme
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package all-the-icons)

  (use-package ivy-rich
    :config (ivy-rich-mode 1))

  (use-package all-the-icons-ivy-rich
    :config (all-the-icons-ivy-rich-mode 1))

  (use-package doom-modeline
    :defer t
    :init
      (setq evil-normal-state-tag   (propertize " NORMAL " 'face '((:background "black" :foreground "green")))
            evil-emacs-state-tag    (propertize " EMACS " 'face '((:background "orange" :foreground "black")))
            evil-insert-state-tag   (propertize " INSERT " 'face '((:background "blue")))
            evil-motion-state-tag   (propertize " MOTION " 'face '((:background "blue")))
            evil-visual-state-tag   (propertize " VISUAL " 'face '((:background "grey80" :foreground "black")))
            evil-operator-state-tag (propertize " OPERATOR " 'face '((:background "purple"))))
    :hook (after-init . doom-modeline-init))

  (use-package doom-themes
    :init
      (setq doom-themes-enable-bold t
            doom-themes-enable-italic nil)
      (if (daemonp)
       (add-hook 'after-make-frame-functions (lambda (frame)
        (when (eq (length (frame-list)) 2)
         (progn (select-frame frame) (load-theme 'doom-nord)))))
       (load-theme 'doom-nord t))
      (doom-themes-visual-bell-config)
      (doom-themes-org-config))

  (use-package solaire-mode
    :init
      (setq solaire-mode-remap-modeline nil)
      (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
      (defface solaire-default-face
        '((t :inherit default :background "#1f2021"))
        "Face for solaire"
      )
      (defface solaire-minibuffer-face
        '((t :background "#22252c" :foreground "#abb2bf"))
        "Face for solaire - minibuffer"
      )
      (defface solaire-line-number-face
        '((t :inherit 'line-number :background "#22252c"))
        "Face for solaire - line number"
      )
      (defface solaire-hl-line-face
        '((t :inherit 'hl-line :background "#22252c"))
        "Face for solaire - highlghted line number"
      )
      (solaire-mode-swap-bg)
  )
  #+end_src

* De-light a few dependency minor-modes
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package undo-tree
    :delight undo-tree-mode)
  (use-package yasnippet
    :delight yas-minor-mode)
  #+end_src

* Fix up hideshow mode
  #+begin_src elisp :tangle ~/.config/emacs/packages.el
  (use-package hideshow
    :ensure nil
    :init
      (setq hs-allow-nesting t)
    :config
      (add-hook 'prog-mode-hook #'hs-minor-mode))
  #+end_src

* Spawn an eshell nicely
  Namely, in the bottom third of the current window and with a custom name
  #+begin_src elisp :tangle ~/.config/emacs/ui.el
  (defun eshell-here ()
    "Opens up a new shell in the directory associated with the
     current buffer's file. The eshell is renamed to match that
     directory to make multiple eshell windows easier."
    (interactive)
    (let* ((parent (if (buffer-file-name)
                   (file-name-directory (buffer-file-name))
                 default-directory))
           (height (/ (window-total-height) 3))
           (name   (car (last (split-string parent "/" t)))))
           (split-window-vertically (- height))
           (other-window 1)
           (eshell "new")
           (rename-buffer (concat "*eshell: " name "*"))
            (insert (concat "ls"))
            (eshell-send-input)))

     (defun eshell/x ()
       (insert "exit")
       (eshell-send-input)
       (delete-window))

     (general-define-key :states '(normal)
                         :prefix (concat default-leader-key)
                         "!" 'eshell-here)
                               
    #+end_src
