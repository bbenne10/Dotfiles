#+TITLE: Emacs configuration

** Increase garbage collection threshold during init
  Theoretically increases boot up speed.

  #+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq gc-cons-threshold 64000000)
  (add-hook 'after-init-hook #'(lambda () (setq gc-cons-threshold 800000)))
  #+end_src

** Store all backups and autosaves in the temp dir
  #+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq backup-directory-alist `((".*" . ,temporary-file-directory))
        auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  #+end_src

** Move our custom file to a location consistent with our other files (and source it)
  #+begin_src elisp :tangle ~/.emacs.d/init.el
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
  #+end_src

** Load the other files in our set up
  #+begin_src elisp :tangle ~/.emacs.d/init.el
  (load "~/.emacs.d/packages.el")
  (load "~/.emacs.d/ui.el")
  (load "~/.emacs.d/languages.el")
  #+end_src

** Set up Hasklig and its ligatures
  Obviously requires [[https://github.com/i-tu/Hasklig][Hasklig]] installed.

  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (setq default-frame-alist '((font . "Hasklig-9")))

  (defun my-correct-symbol-bounds (pretty-alist)
    (mapcar (lambda (el)
              (setcdr el (string ?\t (cdr el)))
              el)
            pretty-alist))
  (defun my-ligature-list (ligatures codepoint-start)
    (let ((codepoints (-iterate '1+ codepoint-start (length ligatures))))
      (-zip-pair ligatures codepoints)))
  (setq my-hasklig-ligatures
        (let* ((ligs '("&&" "***" "*>" "\\\\" "||" "|>" "::"
                       "==" "===" "==>" "=>" "=<<" "!!" ">>"
                       ">>=" ">>>" ">>-" ">-" "->" "-<" "-<<"
                       "<*" "<*>" "<|" "<|>" "<$>" "<>" "<-"
                       "<<" "<<<" "<+>" ".." "..." "++" "+++"
                       "/=" ":::" ">=>" "->>" "<=>" "<=<" "<->")))
          (my-correct-symbol-bounds (my-ligature-list ligs #Xe100))))

  (defun my-set-hasklig-ligatures ()
    (setq prettify-symbols-alist
          (append my-hasklig-ligatures prettify-symbols-alist))
    (prettify-symbols-mode))

  (add-hook 'prog-mode-hook (function (lambda () (my-set-hasklig-ligatures))))
#+end_src

** Bold curent line number
  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (set-face-attribute 'line-number-current-line nil
                      :font "Hasklig-9:weight=Bold"
                      :inverse-video nil)
  #+end_src

** Enable some nice programming features in in prog-mode
  *NOTE*: This requires emacs 26 or newer!
  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (add-hook 'prog-mode-hook (function(lambda ()
    (prettify-symbols-mode 1)
    (show-paren-mode 1)
    (global-hl-line-mode 1)
    (display-line-numbers-mode)
  )))
  #+end_src

** Strip trailing whitespace in prog-mode
  This installs the hook as a buffer-local.

  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (add-hook 'prog-mode-hook (lambda ()
   (add-hook 'before-save-hook 'delete-trailing-whitespace nil t)))
  #+end_src

  ** Disable scrollbar, menu bar, and tool bar
  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (scroll-bar-mode 0)
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  #+end_src

** Set some variables (explained inline)
  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (setq initial-scratch-message ""                     ; disable the scratch message
        inhibit-startup-message t                      ; disable the startup screen
        scroll-conservatively 101                      ; move window one line at a time when point approaches edge
        scroll-margin 5                                ; start scrolling 5 lines from edge
        visible-bell t                                 ; Audible bell is cancer, but visible bell works okay
        ad-redefinition-action 'accept                 ; Tell emacs we're okay with functions being given advice
        vc-follow-symlinks t                           ; Follow symlinks to vcs controlled files
        select-enable-clipboard t                      ; copy actions copy to clipboard
        select-enable-primary t                        ; copy actions also copy to primary
        mouse-drag-copy-region t                       ; highlighting a section causes it to get copied (linux default behavior)
        prettify-symbols-unprettify-at-point t         ; unprettify symbols when the point hits them so we can edit them
  )
  (setq-default fill-column 80                         ; in fill-mode, what column do we wrap at?
                truncate-lines t                       ; disable line wrapping
                indent-tabs-mode nil                   ; use spaces over tabs everywhere
                tab-width 2                            ; but when encountering a tab, how large is it?
                tab-stop-list (number-sequence 3 120 2); and what are the tabstop points when shifting?
  )
#+end_src

** Don't make me type 'yes' or 'no', even if it's important
  #+begin_src elisp :tangle ~/.emacs.d/ui.el
  (defalias 'yes-or-no-p 'y-or-n-p)
  #+end_src

** Change the Javascript linter that flycheck picks and set JS indentation to 2
  #+begin_src elisp :tangle ~/.emacs.d/languages.el
  (add-hook 'js-mode-hook
            (function (lambda ()
                        (flycheck-select-checker 'javascript-standard)
                        (setq js-indent-level 2)
                        (setq evil-shift-width 2))))
  #+end_src

** Use the c/c++ GCC checker in C/C++ code
  #+begin_src elisp :tangle ~/.emacs.d/languages.el
  (add-hook 'c++-mode-hook
            (function (lambda ()
                        (flycheck-select-checker 'c/c++-gcc))))
  #+end_src

** Initialize existing packages
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (setq package-user-dir "~/.emacs.d/elpa"
        package-archives '(("melpa" . "http://melpa.milkbox.net/packages/")
                           ("melpa-stable" . "http://stable.melpa.org/packages/")
                           ("gnu" . "http://elpa.gnu.org/packages/")))
  (defvar use-package-always-ensure t)

  (package-initialize)
  #+end_src

** Auto-require some basic packages outside of use-package
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)
    (package-install 'delight))
  (require 'use-package)
  (require 'bind-key)
  (require 'delight)
  #+end_src

** Instantiate a default leader key
  This key is just left of space on my Preonic. Since I don't use that keyboard everywhere, I use my laptop's hostname to determine if I should set prefix differently
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (defvar default-leader-key "<XF86TouchpadOff>")
  (if (string= (system-name) "Bryan-Laptop")
    (setq default-leader-key "<SPC>")
  )
  #+end_src

** Set up General.el for keybindings
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package general
    :config
      (global-unset-key (kbd "C-h h")))
  #+end_src

** Set up Company as completion framework
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package company
    :delight company-mode
    :config
      (setq company-tooltip-limit 20
            company-tooltip-align-annotations t)
      (global-company-mode 1)
  )
  #+end_src

** Org mode!
  Rather important: We use this to tangle this very file (though 24+ ships a good enough version to do so)

  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package org
    :config
      (setq org-babel-load-languages
            '((python . t)
              (elisp . t)
              (shell . t)))
  )
  #+end_src

** Discover and respect editorconfig settings
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package editorconfig)
  #+end_src

** Highlight colors in HTML/CSS/files
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
    (use-package rainbow-mode)
  #+end_src

** Set up evil and plugins
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package evil
    :config
      (evil-mode 1)
      (evil-set-initial-state 'term-mode 'emacs))

  (use-package evil-matchit
    :config (global-evil-matchit-mode 1))

  (use-package evil-numbers
    :config
      (general-define-key :states '(normal)
                          "C-a" 'evil-numbers/inc-at-pt
                          "C-x" 'evil-numbers/dec-at-pt))

  (use-package evil-surround
    :config (global-evil-surround-mode 1))

  (use-package evil-visual-mark-mode
    :config (evil-visual-mark-mode 1))

  (use-package evil-magit
    :after magit
    :init
      (setq evil-magit-want-horizontal-movement nil))
  #+end_src

** Set up counsel + projectile to easily find and swap buffers
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package counsel
    :after (general)
    :delight ivy-mode
    :init
    (defun counsel-ag-project-at-point ()
      (interactive)
      (counsel-ag (thing-at-point 'symbol) (projectile-project-root)))
    :config
      (ivy-mode 1)
      (general-define-key :states '(normal)
                          "/" 'swiper
                          "M-x" 'counsel-M-x)
      (general-define-key :states '(normal)
                          :prefix default-leader-key
                          "g" 'counsel-projectile-rg
                          "B" 'ivy-switch-buffer
                          "E" 'counsel-find-file))

  (use-package projectile
    :delight projectile-mode
    :init
      (setq projectile-completion-system 'ivy)
    :config
      (projectile-global-mode))

  (use-package counsel-projectile
    :after (projectile general)
    :config
      (general-define-key :states '(normal)
                          :prefix default-leader-key
                          "e" 'counsel-projectile-find-file
                          "p" 'counsel-projectile-switch-project
                          default-leader-key 'counsel-projectile))
  #+end_src

** Set up multi-term
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package multi-term
    :config
      (setq multi-term-program "/bin/zsh")
      (add-hook 'term-mode-hook (function (lambda () (goto-address-mode))))
      (add-hook 'term-exec-hook (function (lambda () (set-buffer-process-coding-system 'utf-8-unix 'utf-8-unix)))))
      (general-define-key :keymaps 'term-raw-map "C-w" nil)
      (general-define-key :keymaps 'term-raw-map
                          :prefix "C-w"
                          "h" #'evil-window-left
                          "j" #'evil-window-down
                          "k" #'evil-window-up
                          "l" #'evil-window-right
                          "s" #'evil-window-split
                          "v" #'evil-window-vsplit
                          "c" #'evil-window-delete)
  #+end_src

** Highlight TODO notes using fic-mode
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package fic-mode
    :config (add-hook 'prog-mode-hook (function (lambda () (fic-mode 1)))))
  #+end_src

** Set up magit for git integration
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package magit
    :delight (magit-auto-revert-mode)
    :config
      (setq magit-popup-show-common-commands nil)
  )
  #+end_src

** Dash integration
  *Note*: This also pulls in Helm. If you don't like that, disable it.
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package counsel-dash
    :after (general)
    :init
      (setq counsel-dash-docsets-path "~/.emacs.d/dash-docsets"
            counsel-dash-min-length 3
            counsel-dash-browser-func 'browse-url)

      (defun counsel-dash-at-point ()
        (interactive)
        (counsel-dash (thing-at-point 'symbol)))
    :commands (counsel-dash-activate-docset counsel-dash counsel-dash-at-point counsel-dash)
    :config
      (add-hook 'emacs-lisp-mode-hook (lambda () (setq-local counsel-dash-docsets '("Emacs Lisp"))))
      (add-hook 'js-mode-hook (lambda () (setq-local counsel-dash-docsets '("Javascript" "MomentJS "))))
      (add-hook 'python-mode-hook (lambda () (setq-local counsel-dash-docsets '("Python3" "Flask" "Jinja"))))
      (add-hook 'scala-mode-hook (lambda () (setq-local counsel-dash-docsets '("Scala"))))
      (add-hook 'c++-mode-hook (lambda () (setq-local counsel-dash-docsets '("C++"))))
      (add-hook 'c-mode-hook (lambda () (setq-local counsel-dash-docsets '("C"))))
      (add-hook 'sh-mode-hook (lambda () (setq-local counsel-dash-docsets '("Bash"))))

      (general-define-key :states '(normal)
                          :prefix default-leader-key
                          "d" 'counsel-dash-at-point
                          "D" 'counsel-dash))
  #+end_src)

** Set up notmuch
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package notmuch
    :load-path "/usr/local/share/emacs/site-lisp/notmuch/"
    :init
    (setq notmuch-saved-searches '(("Inbox" . "tag:inbox AND NOT tag:archived")
                                   ("Unread" . "tag:unread")
                                   ("EA" . "tag:ea")
                                   ("School" . "tag:school")
                                   ("Lists" . "tag:lists")
                                   ("Apiary" . "tag:apiary"))
          mail-specify-envelope-from t
          mail-envelope-from 'header
          message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "/home/bbennett37/.bin/notmuch_sendmail"
          notmuch-message-headers '("Subject" "To" "Cc" "Date")
          mml-default-sign-method "smime"
          )

      (defun bb-notmuch-toggle-tag (tag)
        "Toggle the presence of a tag on a message"
        (if (member tag (notmuch-search-get-tags))
                    (notmuch-search-tag (list (concat "-" tag)))
                (notmuch-search-tag (list (concat "+" tag))))
         (next-line))

      (defun bb-notmuch-remove-inbox ()
        (interactive)
        (if (member "inbox" (notmuch-search-get-tags))
          (notmuch-search-tag (list "-inbox"))))

      (defun bb-notmuch-toggle-archived ()
        (interactive)
        (bb-notmuch-remove-inbox)
        (bb-notmuch-toggle-tag "archived"))

      (defun show-nm-inbox ()
        (interactive)
        (notmuch-search "tag:inbox and not tag:archived"))


    :config
      ;; define keys to take us to various inboxes
      (general-define-key :keymaps 'evil-normal-state-map
                          :prefix (concat default-leader-key " " "m")
                          "i" #'show-nm-inbox)

      ;; override some behavior to be more vim like in notmuch modes.
      (general-define-key :keymaps '(notmuch-show-mode-map
                                     notmuch-search-mode-map)
                          "d" #'bb-notmuch-toggle-archived
                          "a" 'bb-notmuch-toggle-archived
                          "j" 'next-line
                          "k" 'previous-line
                          ":" 'evil-ex
                          "r" 'notmuch-show-reply
                          "R" 'notmuch-show-reply-sender
                          "t" nil)

      (general-define-key :keymaps '(notmuch-show-mode-map
                                     notmuch-search-mode-map)
                          :prefix "C-w"
                          "h" #'evil-window-left
                          "j" #'evil-window-down
                          "k" #'evil-window-up
                          "l" #'evil-window-right
                          "s" #'evil-window-split
                          "v" #'evil-window-vsplit
                          "c" #'evil-window-delete)


      ;; define some keys to apply some tags in notmuch modes.
      (general-define-key :keymaps '(notmuch-show-mode-map
                                     notmuch-search-mode-map)
                          :prefix "t"
                          "s" #'(lambda () (interactive) (bb-notmuch-toggle-tag "school"))
                          "a" #'(lambda () (interactive) (bb-notmuch-toggle-tag "apiary"))
                          "e" #'(lambda () (interactive) (bb-notmuch-toggle-tag "ea")))
  )
  #+end_src

** Set up Flycheck to check codebases
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package flycheck
    :after (general)
    :delight flycheck-mode
    :commands (flycheck-mode)
    :init
      (add-to-list 'display-buffer-alist
                   `(,(rx bos "*Flycheck errors*" eos)
                     (display-buffer-reuse-window
                      display-buffer-in-side-window)
                     (reusable-frames . visible)
                     (side . bottom)
                     (window-height . 0.2)))
      (defun delete-flycheck-errors-list ()
        (interactive)
        (if (get-buffer-window "*Flycheck errors*" "visible") (delete-window (get-buffer-window "*Flycheck errors*" "visible"))))
    :config
      (general-define-key :prefix default-leader-key
                          :states '(normal)
                          "lo" 'flycheck-list-errors
                          "lc" 'delete-flycheck-errors-list
                          "ln" 'flycheck-next-error
                          "lp" 'flycheck-previous-error)
      (add-hook 'prog-mode-hook  (function (lambda () (flycheck-mode))))
    )
  (use-package flycheck-pos-tip
     :after flycheck
     :config (flycheck-pos-tip-mode))
  #+end_src

** Highlight nested brackets differently in bracketized languages
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package rainbow-delimiters
    :config
      (add-hook 'c-mode-common-hook (function (lambda () (rainbow-delimiters-mode-enable))))
      (add-hook 'scala-mode-hook (function (lambda () (rainbow-delimiters-mode-enable))))
      (add-hook 'elisp-mode-common-hook (function (lambda () (rainbow-delimiters-mode-enable)))))
  #+end_src

** Set up Python editing with LSP and auto-pyenv-mode
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package pyenv-mode
    :init
     (setq exec-path (cons (format "%s/.pyenv/shims" (getenv "HOME")) exec-path))
     (add-hook 'python-mode-hook (function (lambda () (pyenv-mode)))))

  (use-package pyenv-mode-auto
    :after (pyenv-mode))

  (use-package anaconda-mode
     :after (general pyenv-mode-auto)
     :commands anaconda-mode
     :delight anaconda-mode
     :init
       (defun python-insert-trace ()
         ;; insert a line that impots pdb and sets a trace just below the current line
         (interactive)
         (move-end-of-line 1)
         (insert "\n")
         (indent-according-to-mode)
         (insert "import pdb; pdb.set_trace()"))

       (add-hook 'python-mode-hook
                 (function
                  (lambda () (setq evil-shift-width python-indent-offset)
                    (anaconda-mode 1))))

       (general-define-key :keymaps 'anaconda-mode-map
                           :states '(normal)
                           :prefix (concat default-leader-key "l")
                           "d" 'anaconda-mode-find-definitions
                           "a" 'anaconda-mode-find-assignments
                           "r" 'anaconda-mode-find-references
                           "?" 'anaconda-mode-show-doc
                           "t" 'python-insert-trace)
  )

#+end_src

** Set up Javascript editing
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package rjsx-mode
    :mode "\\.js[x]*\\'")
  (use-package lsp-javascript-typescript
    :config
      (add-hook 'js-mode-hook #'lsp-javascript-typescript-enable)
      (add-hook 'rjsx-mode-hook #'lsp-javascript-typescript-enable)
  )
  #+end_src

** Set up Scala editing mode
*** Scala-mode
#+begin_src elisp :tangle ~/.emacs.d/packages.el
(use-package scala-mode
  :interpreter ("scala" . scala-mode))
#+end_src

*** sbt-mode
#+begin_src elisp :tangle ~/.emacs.d/packages.el
    (use-package sbt-mode
  :commands sbt-start sbt-command
  :config
    ;; WORKAROUND: https://github.com/ensime/emacs-sbt-mode/issues/31
    ;; allows using SPACE when in the minibuffer
    (substitute-key-definition
     'minibuffer-complete-word
     'self-insert-command
     minibuffer-local-completion-map))
#+end_src


*** ENSIME
This requires some basic setup - find it documented [[http://ensime.org/editors/emacs/install/#installing][here.]]

#+begin_src elisp :tangle ~/.emacs.d/packages.el
(use-package ensime
  :pin melpa-stable
  :commands (ensime ensime-mode)
  :init (setq ensime-startup-notification nil ensime-startup-snapshot-notification nil)
  (add-hook 'scala-mode-hook #'ensime-mode)
  :config (set-face-attribute 'ensime-implicit-highlight nil
                              :underline nil
                              :slant 'italic)
  (defun flycheck-verify-ensime ()
    "Verify the Ensime syntax checker."
    (list (flycheck-verification-result-new
           :label "Ensime Mode"
           :message (if ensime-mode "Enabled" "Disabled")
           :face (if ensime-mode 'success '(bold warning)))

          (flycheck-verification-result-new :label "Ensime connection"
                                            :message (if (ensime-connected-p) "open" "closed")
                                            :face (if (ensime-connected-p) 'success '(bold warning)))))

  (defun flycheck-ensime-parse-note (note checker)
    "Parse a single Ensime NOTE for CHECKER into an error."
    (let ((severity (plist-get note :severity)))
      (unless (symbolp severity) (setq severity (intern severity)))
      (flycheck-error-new-at (plist-get note :line) (plist-get note :col) severity (plist-get note :msg)
                             :checker checker
                             :filename (plist-get note :file)
                             :buffer (current-buffer))))
  (defun flycheck-ensime-parse-notes (notes checker)
    "Parse Ensime NOTES for CHECKER into Flycheck errors."
    (mapcar (lambda (n) (flycheck-ensime-parse-note n checker)) notes))

  (defun flycheck-ensime-start (checker callback)
    "Start a syntax CHECKER with Ensime."
    (condition-case err
        (let* ((notes (ensime-scala-compiler-notes (ensime-connection)))
               (errors (flycheck-ensime-parse-notes notes checker)))
          (funcall callback 'finished errors))
      (error (funcall callback 'errored (error-message-string err)))))

  (defun flycheck-ensime-setup ()
    "Setup Flycheck for Ensime."
    (interactive)
    (add-to-list 'flycheck-checkers 'scala-ensime)
    (advice-add 'ensime-make-note-overlays
                :override #'ignore '((name . flycheck-ensime-disable-ensime-overlays))))

  (flycheck-define-generic-checker 'scala-ensime
    "A Scala syntax checker using Ensime."
    :start #'flycheck-ensime-start
    :verify #'flycheck-verify-ensime
    :modes '(scala-mode)
    :predicate (lambda () (and ensime-mode (ensime-connection-or-nil)))
    :next-checkers '((warning . scala-scalastyle))))
#+end_src

** Set up basic Lua editing
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package lua-mode)
  #+end_src

** Set up Markdown editing
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package markdown-mode
    :commands (markdown-mode)
    :config
      (setq markdown-css-paths
                   '("https://markdowncss.github.io/modest/css/modest.css"))
  )
  #+end_src

** Set up YAML editing
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package yaml-mode
    :mode ("\\.yaml'" "\\.yml'"))
  #+end_src

** Set up visual theme
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package all-the-icons)

  (use-package zerodark-theme
    :config
      (load-theme 'zerodark)
      (zerodark-setup-modeline-format))

  (use-package spaceline-config
    :ensure spaceline
    :config
      (setq evil-insert-state-message nil
            evil-visual-state-message nil
            evil-visual-state-tag "V"
            evil-insert-state-tag "I"
            evil-normal-state-tag "N"
            spaceline-highlight-face-func 'spaceline-highlight-face-evil-state))

  (use-package solaire-mode
    :init
      (setq solaire-mode-remap-modeline nil)
      (add-hook 'after-change-major-mode-hook #'turn-on-solaire-mode)
      (defface solaire-default-face
        '((t :inherit default :background "#1f2021"))
        "Face for solaire"
      )
      (defface solaire-minibuffer-face
        '((t :background "#22252c" :foreground "#abb2bf"))
        "Face for solaire - minibuffer"
      )
      (defface solaire-line-number-face
        '((t :inherit 'line-number :background "#22252c"))
        "Face for solaire - line number"
      )
      (defface solaire-hl-line-face
        '((t :inherit 'hl-line :background "#22252c"))
        "Face for solaire - highlghted line number"
      )
      (solaire-mode-swap-bg)
  )
  #+end_src

** De-light a few dependency minor-modes
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package undo-tree
    :delight undo-tree-mode)
  (use-package yasnippet
    :delight yas-minor-mode)
  #+end_src

** Fix up hideshow mode
  #+begin_src elisp :tangle ~/.emacs.d/packages.el
  (use-package hideshow
    :init
      (setq hs-allow-nesting t)
    :config
      (add-hook 'prog-mode-hook #'hs-minor-mode))
  #+end_src
