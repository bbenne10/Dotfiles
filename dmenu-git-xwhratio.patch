diff --git a/config.mk b/config.mk
index c0d466b..6f7b949 100644
--- a/config.mk
+++ b/config.mk
@@ -12,12 +12,16 @@ X11LIB = /usr/X11R6/lib
 XINERAMALIBS  = -lXinerama
 XINERAMAFLAGS = -DXINERAMA
 
+# Xft, comment if you don't want it
+XFTINC = `pkg-config --cflags xft pango pangoxft`
+XFTLIBS  = -lXrender -lfreetype -lz `pkg-config --libs xft pango pangoxft`
+
 # includes and libs
-INCS = -I${X11INC}
-LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS}
+INCS = -I${X11INC} ${XFTINC}
+LIBS = -L${X11LIB} -lX11 ${XINERAMALIBS} ${XFTLIBS}
 
 # flags
-CPPFLAGS = -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
+CPPFLAGS = -D_DEFAULT_SOURCE -D_BSD_SOURCE -D_POSIX_C_SOURCE=200809L -DVERSION=\"${VERSION}\" ${XINERAMAFLAGS}
 CFLAGS   = -ansi -pedantic -Wall -Os ${INCS} ${CPPFLAGS}
 LDFLAGS  = -s ${LIBS}
 
diff --git a/dmenu.1 b/dmenu.1
index 2897ab1..bb3c9d8 100644
--- a/dmenu.1
+++ b/dmenu.1
@@ -58,7 +58,7 @@ dmenu is displayed on the monitor supplied.
 defines the prompt to be displayed to the left of the input field.
 .TP
 .BI \-fn " font"
-defines the font or font set used.
+defines the font or font set used. eg. "fixed" or "Monospace-12:normal" (an xft font)
 .TP
 .BI \-nb " color"
 defines the normal background color.
diff --git a/dmenu.c b/dmenu.c
index 94c70de..f8ba3ba 100644
--- a/dmenu.c
+++ b/dmenu.c
@@ -1,4 +1,4 @@
-/* See LICENSE file for copyright and license details. */
+
 #include <ctype.h>
 #include <stdio.h>
 #include <stdlib.h>
@@ -14,9 +14,14 @@
 #include "draw.h"
 
 #define INTERSECT(x,y,w,h,r)  (MAX(0, MIN((x)+(w),(r).x_org+(r).width)  - MAX((x),(r).x_org)) \
-                             * MAX(0, MIN((y)+(h),(r).y_org+(r).height) - MAX((y),(r).y_org)))
+                              * MAX(0, MIN((y)+(h),(r).y_org+(r).height) - MAX((y),(r).y_org)))
+#ifndef MIN
 #define MIN(a,b)              ((a) < (b) ? (a) : (b))
+#endif
+#ifndef MAX
 #define MAX(a,b)              ((a) > (b) ? (a) : (b))
+#endif
+#define DEFFONT "Monospace 12"
 
 typedef struct Item Item;
 struct Item {
@@ -27,6 +32,7 @@ struct Item {
 
 static void appenditem(Item *item, Item **list, Item **last);
 static void calcoffsets(void);
+static void cleanup(void);
 static char *cistrstr(const char *s, const char *sub);
 static void drawmenu(void);
 static void grabkeyboard(void);
@@ -43,11 +49,14 @@ static void usage(void);
 static char text[BUFSIZ] = "";
 static int bh, mw, mh;
 static int inputw, promptw;
+static float width = 0, xoffset = 0, yoffset = 0;
 static size_t cursor = 0;
-static unsigned long normcol[ColLast];
-static unsigned long selcol[ColLast];
-static unsigned long outcol[ColLast];
+static ColorSet *normcol;
+static ColorSet *selcol;
+static ColorSet *outcol;
 static Atom clip, utf8;
+static Bool running = True;
+static int ret = 0;
 static DC *dc;
 static Item *items = NULL;
 static Item *matches, *matchend;
@@ -85,6 +94,12 @@ main(int argc, char *argv[]) {
 		/* these options take one argument */
 		else if(!strcmp(argv[i], "-l"))   /* number of lines in vertical list */
 			lines = atoi(argv[++i]);
+		else if(!strcmp(argv[i], "-x"))
+			xoffset = atoi(argv[++i]);
+		else if(!strcmp(argv[i], "-y"))
+			yoffset = atof(argv[++i]);
+		else if(!strcmp(argv[i], "-w"))
+			width = atof(argv[++i]);
 		else if(!strcmp(argv[i], "-m"))
 			mon = atoi(argv[++i]);
 		else if(!strcmp(argv[i], "-p"))   /* adds prompt to left of input field */
@@ -103,7 +118,10 @@ main(int argc, char *argv[]) {
 			usage();
 
 	dc = initdc();
-	initfont(dc, font);
+	initfont(dc, font ? font : DEFFONT);
+	normcol = initcolor(dc, normfgcolor, normbgcolor);
+	selcol = initcolor(dc, selfgcolor, selbgcolor);
+	outcol = initcolor(dc, outfgcolor, outbgcolor);
 
 	if(fast) {
 		grabkeyboard();
@@ -116,7 +134,8 @@ main(int argc, char *argv[]) {
 	setup();
 	run();
 
-	return 1; /* unreachable */
+	cleanup();
+	return ret;
 }
 
 void
@@ -159,6 +178,15 @@ cistrstr(const char *s, const char *sub) {
 }
 
 void
+cleanup(void) {
+	freecol(dc, normcol);
+	freecol(dc, selcol);
+	freecol(dc, outcol);
+	XDestroyWindow(dc->dpy, win);
+	XUngrabKeyboard(dc->dpy, CurrentTime);
+}
+
+void
 drawmenu(void) {
 	int curpos;
 	Item *item;
@@ -166,7 +194,7 @@ drawmenu(void) {
 	dc->x = 0;
 	dc->y = 0;
 	dc->h = bh;
-	drawrect(dc, 0, 0, mw, mh, True, BG(dc, normcol));
+	drawrect(dc, 0, 0, mw, mh, True, normcol->BG);
 
 	if(prompt && *prompt) {
 		dc->w = promptw;
@@ -177,7 +205,7 @@ drawmenu(void) {
 	dc->w = (lines > 0 || !matches) ? mw - dc->x : inputw;
 	drawtext(dc, text, normcol);
 	if((curpos = textnw(dc, text, cursor) + dc->h/2 - 2) < dc->w)
-		drawrect(dc, curpos, 2, 1, dc->h - 4, True, FG(dc, normcol));
+		drawrect(dc, curpos, 2, 1, dc->h - 4, True, normcol->FG);
 
 	if(lines > 0) {
 		/* draw vertical list */
@@ -330,7 +358,8 @@ keypress(XKeyEvent *ev) {
 		sel = matchend;
 		break;
 	case XK_Escape:
-		exit(EXIT_FAILURE);
+		ret = EXIT_FAILURE;
+		running = False;
 	case XK_Home:
 		if(sel == matches) {
 			cursor = 0;
@@ -369,7 +398,8 @@ keypress(XKeyEvent *ev) {
 	case XK_KP_Enter:
 		puts((sel && !(ev->state & ShiftMask)) ? sel->text : text);
 		if(!(ev->state & ControlMask))
-			exit(EXIT_SUCCESS);
+			ret = EXIT_SUCCESS;
+			running = False;
 		if(sel)
 			sel->out = True;
 		break;
@@ -471,7 +501,7 @@ paste(void) {
 
 	/* we have been given the current selection, now insert it into input */
 	XGetWindowProperty(dc->dpy, win, utf8, 0, (sizeof text / 4) + 1, False,
-	                   utf8, &da, &di, &dl, &dl, (unsigned char **)&p);
+					   utf8, &da, &di, &dl, &dl, (unsigned char **)&p);
 	insert(p, (q = strchr(p, '\n')) ? q-p : (ssize_t)strlen(p));
 	XFree(p);
 	drawmenu();
@@ -505,7 +535,7 @@ void
 run(void) {
 	XEvent ev;
 
-	while(!XNextEvent(dc->dpy, &ev)) {
+	while(running && !XNextEvent(dc->dpy, &ev)) {
 		if(XFilterEvent(&ev, win))
 			continue;
 		switch(ev.type) {
@@ -539,13 +569,6 @@ setup(void) {
 	XineramaScreenInfo *info;
 #endif
 
-	normcol[ColBG] = getcolor(dc, normbgcolor);
-	normcol[ColFG] = getcolor(dc, normfgcolor);
-	selcol[ColBG]  = getcolor(dc, selbgcolor);
-	selcol[ColFG]  = getcolor(dc, selfgcolor);
-	outcol[ColBG]  = getcolor(dc, outbgcolor);
-	outcol[ColFG]  = getcolor(dc, outfgcolor);
-
 	clip = XInternAtom(dc->dpy, "CLIPBOARD",   False);
 	utf8 = XInternAtom(dc->dpy, "UTF8_STRING", False);
 
@@ -584,7 +607,10 @@ setup(void) {
 					break;
 
 		x = info[i].x_org;
-		y = info[i].y_org + (topbar ? 0 : info[i].height - mh);
+		yoffset = yoffset < 1 ? info[i].height * yoffset : yoffset;
+		xoffset = xoffset < 1 ? info[i].width * xoffset : xoffset;
+
+		y = info[i].y_org + (topbar ? yoffset : info[i].height - mh - yoffset);
 		mw = info[i].width;
 		XFree(info);
 	}
@@ -592,16 +618,25 @@ setup(void) {
 #endif
 	{
 		x = 0;
-		y = topbar ? 0 : DisplayHeight(dc->dpy, screen) - mh;
+		y = topbar ? yoffset : DisplayHeight(dc->dpy, screen) - mh - yoffset;
 		mw = DisplayWidth(dc->dpy, screen);
 	}
+
+	if (width > 0 && width < 1) {
+		x = x + (mw - (mw * width)) / 2;
+		mw = mw * width;
+	} else {
+		mw = width ? width : mw;
+		x += xoffset;
+	}
+
 	promptw = (prompt && *prompt) ? textw(dc, prompt) : 0;
 	inputw = MIN(inputw, mw/3);
 	match();
 
 	/* create menu window */
 	swa.override_redirect = True;
-	swa.background_pixel = normcol[ColBG];
+	swa.background_pixel = normcol->BG;
 	swa.event_mask = ExposureMask | KeyPressMask | VisibilityChangeMask;
 	win = XCreateWindow(dc->dpy, root, x, y, mw, mh, 0,
 	                    DefaultDepth(dc->dpy, screen), CopyFromParent,
@@ -621,6 +656,7 @@ setup(void) {
 void
 usage(void) {
 	fputs("usage: dmenu [-b] [-f] [-i] [-l lines] [-p prompt] [-fn font] [-m monitor]\n"
-	      "             [-nb color] [-nf color] [-sb color] [-sf color] [-v]\n", stderr);
+	      "             [-nb color] [-nf color] [-sb color] [-sf color] [-v]\n"
+          "             [-x pos or ration] [-y pos or ratio] [-w width]\n", stderr);
 	exit(EXIT_FAILURE);
 }
diff --git a/draw.c b/draw.c
index 76f0c54..56882c6 100644
--- a/draw.c
+++ b/draw.c
@@ -7,11 +7,12 @@
 #include <X11/Xlib.h>
 #include "draw.h"
 
+#ifndef MAX
 #define MAX(a, b)  ((a) > (b) ? (a) : (b))
+#endif
+#ifndef MIN
 #define MIN(a, b)  ((a) < (b) ? (a) : (b))
-#define DEFAULTFN  "fixed"
-
-static Bool loadfont(DC *dc, const char *fontstr);
+#endif
 
 void
 drawrect(DC *dc, int x, int y, unsigned int w, unsigned int h, Bool fill, unsigned long color) {
@@ -23,7 +24,7 @@ drawrect(DC *dc, int x, int y, unsigned int w, unsigned int h, Bool fill, unsign
 }
 
 void
-drawtext(DC *dc, const char *text, unsigned long col[ColLast]) {
+drawtext(DC *dc, const char *text, ColorSet *col) {
 	char buf[BUFSIZ];
 	size_t mn, n = strlen(text);
 
@@ -35,22 +36,21 @@ drawtext(DC *dc, const char *text, unsigned long col[ColLast]) {
 	if(mn < n)
 		for(n = MAX(mn-3, 0); n < mn; buf[n++] = '.');
 
-	drawrect(dc, 0, 0, dc->w, dc->h, True, BG(dc, col));
+	drawrect(dc, 0, 0, dc->w, dc->h, True, col->BG);
 	drawtextn(dc, buf, mn, col);
 }
 
 void
-drawtextn(DC *dc, const char *text, size_t n, unsigned long col[ColLast]) {
-	int x = dc->x + dc->font.height/2;
-	int y = dc->y + dc->font.ascent+1;
-
-	XSetForeground(dc->dpy, dc->gc, FG(dc, col));
-	if(dc->font.set)
-		XmbDrawString(dc->dpy, dc->canvas, dc->font.set, dc->gc, x, y, text, n);
-	else {
-		XSetFont(dc->dpy, dc->gc, dc->font.xfont->fid);
-		XDrawString(dc->dpy, dc->canvas, dc->gc, x, y, text, n);
-	}
+drawtextn(DC *dc, const char *text, size_t n, ColorSet *col) {
+        int x = dc->x + dc->font.height/2;
+	int y = dc->y+1;
+
+	XSetForeground(dc->dpy, dc->gc, col->FG);
+        if (!dc->xftdraw)
+                eprintf("error, xft drawable does not exist");
+        pango_layout_set_text(dc->plo, text, n);
+        pango_xft_render_layout(dc->xftdraw, &col->FG_xft, dc->plo,
+                        x * PANGO_SCALE, y * PANGO_SCALE);
 }
 
 void
@@ -69,16 +69,25 @@ eprintf(const char *fmt, ...) {
 }
 
 void
+freecol(DC *dc, ColorSet *col) {
+    if(col) {
+        if(&col->FG_xft)
+            XftColorFree(dc->dpy, DefaultVisual(dc->dpy, DefaultScreen(dc->dpy)),
+                DefaultColormap(dc->dpy, DefaultScreen(dc->dpy)), &col->FG_xft);
+        free(col);
+    }
+}
+
+void
 freedc(DC *dc) {
-	if(dc->font.set)
-		XFreeFontSet(dc->dpy, dc->font.set);
-	if(dc->font.xfont)
-		XFreeFont(dc->dpy, dc->font.xfont);
-	if(dc->canvas)
+    if(dc->canvas)
 		XFreePixmap(dc->dpy, dc->canvas);
-	XFreeGC(dc->dpy, dc->gc);
-	XCloseDisplay(dc->dpy);
-	free(dc);
+	if(dc->gc)
+        XFreeGC(dc->dpy, dc->gc);
+	if(dc->dpy)
+        XCloseDisplay(dc->dpy);
+	if(dc)
+        free(dc);
 }
 
 unsigned long
@@ -91,6 +100,19 @@ getcolor(DC *dc, const char *colstr) {
 	return color.pixel;
 }
 
+ColorSet *
+initcolor(DC *dc, const char * foreground, const char * background) {
+	ColorSet * col = (ColorSet *)malloc(sizeof(ColorSet));
+	if(!col)
+		eprintf("error, cannot allocate memory for color set");
+        col->BG = getcolor(dc, background);
+        col->FG = getcolor(dc, foreground);
+	if (!XftColorAllocName(dc->dpy, DefaultVisual(dc->dpy, DefaultScreen(dc->dpy)),
+                DefaultColormap(dc->dpy, DefaultScreen(dc->dpy)), foreground, &col->FG_xft))
+                eprintf("error, cannot allocate xft font color '%s'\n", foreground);
+	return col;
+}
+
 DC *
 initdc(void) {
 	DC *dc;
@@ -109,39 +131,22 @@ initdc(void) {
 
 void
 initfont(DC *dc, const char *fontstr) {
-	if(!loadfont(dc, fontstr ? fontstr : DEFAULTFN)) {
-		if(fontstr != NULL)
-			fprintf(stderr, "cannot load font '%s'\n", fontstr);
-		if(fontstr == NULL || !loadfont(dc, DEFAULTFN))
-			eprintf("cannot load font '%s'\n", DEFAULTFN);
-	}
-	dc->font.height = dc->font.ascent + dc->font.descent;
-}
+        PangoFontMetrics *metrics;
 
-Bool
-loadfont(DC *dc, const char *fontstr) {
-	char *def, **missing, **names;
-	int i, n;
-	XFontStruct **xfonts;
-
-	if(!*fontstr)
-		return False;
-	if((dc->font.set = XCreateFontSet(dc->dpy, fontstr, &missing, &n, &def))) {
-		n = XFontsOfFontSet(dc->font.set, &xfonts, &names);
-		for(i = 0; i < n; i++) {
-			dc->font.ascent  = MAX(dc->font.ascent,  xfonts[i]->ascent);
-			dc->font.descent = MAX(dc->font.descent, xfonts[i]->descent);
-			dc->font.width   = MAX(dc->font.width,   xfonts[i]->max_bounds.width);
-		}
-	}
-	else if((dc->font.xfont = XLoadQueryFont(dc->dpy, fontstr))) {
-		dc->font.ascent  = dc->font.xfont->ascent;
-		dc->font.descent = dc->font.xfont->descent;
-		dc->font.width   = dc->font.xfont->max_bounds.width;
-	}
-	if(missing)
-		XFreeStringList(missing);
-	return dc->font.set || dc->font.xfont;
+        dc->pgc = pango_xft_get_context(dc->dpy, 0);
+        dc->pfd = pango_font_description_from_string(fontstr);
+        if (pango_font_description_get_size(dc->pfd) == 0)
+           pango_font_description_set_size(dc->pfd, 12 * PANGO_SCALE);
+
+        metrics = pango_context_get_metrics(dc->pgc, dc->pfd, pango_language_from_string(""));
+	dc->font.ascent = pango_font_metrics_get_ascent(metrics) / PANGO_SCALE;
+        dc->font.descent = pango_font_metrics_get_descent(metrics) / PANGO_SCALE;
+
+        pango_font_metrics_unref(metrics);
+
+        dc->plo = pango_layout_new(dc->pgc);
+        pango_layout_set_font_description(dc->plo, dc->pfd);
+        dc->font.height = dc->font.ascent + dc->font.descent;
 }
 
 void
@@ -151,24 +156,27 @@ mapdc(DC *dc, Window win, unsigned int w, unsigned int h) {
 
 void
 resizedc(DC *dc, unsigned int w, unsigned int h) {
+	int screen = DefaultScreen(dc->dpy);
 	if(dc->canvas)
 		XFreePixmap(dc->dpy, dc->canvas);
 
 	dc->w = w;
 	dc->h = h;
 	dc->canvas = XCreatePixmap(dc->dpy, DefaultRootWindow(dc->dpy), w, h,
-	                           DefaultDepth(dc->dpy, DefaultScreen(dc->dpy)));
+	                           DefaultDepth(dc->dpy, screen));
+	if (!(dc->xftdraw)) {
+		dc->xftdraw = XftDrawCreate(dc->dpy, dc->canvas, DefaultVisual(dc->dpy,screen), DefaultColormap(dc->dpy,screen));
+		if(!(dc->xftdraw))
+			eprintf("error, cannot create xft drawable\n");
+	}
 }
 
 int
 textnw(DC *dc, const char *text, size_t len) {
-	if(dc->font.set) {
-		XRectangle r;
-
-		XmbTextExtents(dc->font.set, text, len, NULL, &r);
-		return r.width;
-	}
-	return XTextWidth(dc->font.xfont, text, len);
+        PangoRectangle r;
+        pango_layout_set_text(dc->plo, text, len);
+        pango_layout_get_extents(dc->plo, &r, 0);
+        return r.width / PANGO_SCALE;
 }
 
 int
diff --git a/draw.h b/draw.h
index 43a57bf..08d1e63 100644
--- a/draw.h
+++ b/draw.h
@@ -1,9 +1,8 @@
 /* See LICENSE file for copyright and license details. */
 
-#define FG(dc, col)  ((col)[(dc)->invert ? ColBG : ColFG])
-#define BG(dc, col)  ((col)[(dc)->invert ? ColFG : ColBG])
-
-enum { ColBG, ColFG, ColBorder, ColLast };
+#include <pango/pango.h>
+#include <pango/pangoxft.h>
+#include <pango/pango-font.h>
 
 typedef struct {
 	int x, y, w, h;
@@ -11,22 +10,31 @@ typedef struct {
 	Display *dpy;
 	GC gc;
 	Pixmap canvas;
+	XftDraw *xftdraw;
+        PangoContext *pgc;
+        PangoLayout *plo;
+        PangoFontDescription *pfd;
 	struct {
 		int ascent;
 		int descent;
 		int height;
 		int width;
-		XFontSet set;
-		XFontStruct *xfont;
 	} font;
 } DC;  /* draw context */
 
+typedef struct {
+        unsigned long FG, BG;
+	XftColor FG_xft;
+} ColorSet;
+
 void drawrect(DC *dc, int x, int y, unsigned int w, unsigned int h, Bool fill, unsigned long color);
-void drawtext(DC *dc, const char *text, unsigned long col[ColLast]);
-void drawtextn(DC *dc, const char *text, size_t n, unsigned long col[ColLast]);
+void drawtext(DC *dc, const char *text, ColorSet *col);
+void drawtextn(DC *dc, const char *text, size_t n, ColorSet *col);
+void freecol(DC *dc, ColorSet *col);
 void eprintf(const char *fmt, ...);
 void freedc(DC *dc);
 unsigned long getcolor(DC *dc, const char *colstr);
+ColorSet *initcolor(DC *dc, const char *foreground, const char *background);
 DC *initdc(void);
 void initfont(DC *dc, const char *fontstr);
 void mapdc(DC *dc, Window win, unsigned int w, unsigned int h);
